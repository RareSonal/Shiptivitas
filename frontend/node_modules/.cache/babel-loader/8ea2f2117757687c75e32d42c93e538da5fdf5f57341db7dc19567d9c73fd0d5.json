{"ast":null,"code":"/*import React from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends React.Component {\r\n  render() {\r\n    // Default card class\r\n    let className = ['Card'];\r\n\r\n    // Apply different colors based on the status of the card\r\n    if (this.props.status === 'backlog') {\r\n      className.push('Card-grey'); // For backlog status\r\n    } else if (this.props.status === 'in-progress') {\r\n      className.push('Card-blue'); // For in-progress status\r\n    } else if (this.props.status === 'complete') {\r\n      className.push('Card-green'); // For complete status\r\n    }\r\n\r\n    return (\r\n      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>\r\n        <div className=\"Card-title\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/import React from'react';import'./Card.css';export default class Card extends React.Component{render(){// Mapping statuses to corresponding classes\nconst statusClassMap={backlog:'Card-grey','in-progress':'Card-blue',complete:'Card-green'};// Get the appropriate class for the card based on status\nconst className=['Card',statusClassMap[this.props.status]||''];// Default to empty string if no status matches\nreturn/*#__PURE__*/React.createElement(\"div\",{className:className.join(' '),\"data-id\":this.props.id,\"data-status\":this.props.status},/*#__PURE__*/React.createElement(\"div\",{className:\"Card-title\"},this.props.name));}}","map":{"version":3,"names":["React","Card","Component","render","statusClassMap","backlog","complete","className","props","status","createElement","join","id","name"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Card.js"],"sourcesContent":["/*import React from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends React.Component {\r\n  render() {\r\n    // Default card class\r\n    let className = ['Card'];\r\n\r\n    // Apply different colors based on the status of the card\r\n    if (this.props.status === 'backlog') {\r\n      className.push('Card-grey'); // For backlog status\r\n    } else if (this.props.status === 'in-progress') {\r\n      className.push('Card-blue'); // For in-progress status\r\n    } else if (this.props.status === 'complete') {\r\n      className.push('Card-green'); // For complete status\r\n    }\r\n\r\n    return (\r\n      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>\r\n        <div className=\"Card-title\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/\r\nimport React from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends React.Component {\r\n  render() {\r\n    // Mapping statuses to corresponding classes\r\n    const statusClassMap = {\r\n      backlog: 'Card-grey',\r\n      'in-progress': 'Card-blue',\r\n      complete: 'Card-green',\r\n    };\r\n\r\n    // Get the appropriate class for the card based on status\r\n    const className = ['Card', statusClassMap[this.props.status] || '']; // Default to empty string if no status matches\r\n\r\n    return (\r\n      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>\r\n        <div className=\"Card-title\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,YAAY,CAEnB,cAAe,MAAM,CAAAC,IAAI,QAAS,CAAAD,KAAK,CAACE,SAAU,CAChDC,MAAMA,CAAA,CAAG,CACP;AACA,KAAM,CAAAC,cAAc,CAAG,CACrBC,OAAO,CAAE,WAAW,CACpB,aAAa,CAAE,WAAW,CAC1BC,QAAQ,CAAE,YACZ,CAAC,CAED;AACA,KAAM,CAAAC,SAAS,CAAG,CAAC,MAAM,CAAEH,cAAc,CAAC,IAAI,CAACI,KAAK,CAACC,MAAM,CAAC,EAAI,EAAE,CAAC,CAAE;AAErE,mBACET,KAAA,CAAAU,aAAA,QAAKH,SAAS,CAAEA,SAAS,CAACI,IAAI,CAAC,GAAG,CAAE,CAAC,UAAS,IAAI,CAACH,KAAK,CAACI,EAAG,CAAC,cAAa,IAAI,CAACJ,KAAK,CAACC,MAAO,eAC1FT,KAAA,CAAAU,aAAA,QAAKH,SAAS,CAAC,YAAY,EAAE,IAAI,CAACC,KAAK,CAACK,IAAU,CAC/C,CAAC,CAEV,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}