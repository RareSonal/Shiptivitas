{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator\\\\Shiptivity\\\\src\\\\Board.js\";\n/*import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      }\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  getClients() {\r\n    return [\r\n      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'in-progress'],\r\n      ['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n      ['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n      ['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n      ['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n      ['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n      ['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n      ['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n      ['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n      ['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n    ].map(companyDetails => ({\r\n      id: companyDetails[0],\r\n      name: companyDetails[1],\r\n      description: companyDetails[2],\r\n      status: companyDetails[3],\r\n    }));\r\n  }\r\n\r\n  updateCardStatus(cardId, newStatus) {\r\n    const clients = { ...this.state.clients };\r\n\r\n    // Ensure the target status exists\r\n    if (!clients[newStatus]) {\r\n      console.error(`Invalid status: ${newStatus}`);\r\n      return;\r\n    }\r\n\r\n    // Find and remove the card from its old status\r\n    let cardToMove = null;\r\n    Object.keys(clients).forEach(status => {\r\n      const cardIndex = clients[status].findIndex(client => client.id === cardId);\r\n      if (cardIndex !== -1) {\r\n        // Remove card from the old swimlane\r\n        [cardToMove] = clients[status].splice(cardIndex, 1);\r\n        cardToMove.status = newStatus; // Update card's status\r\n      }\r\n    });\r\n\r\n    // Add the card to the new swimlane\r\n    if (cardToMove) {\r\n      clients[newStatus].push(cardToMove);\r\n      this.setState({ clients });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current])\r\n      .on('drop', (el, target) => {\r\n        const newStatus = target.getAttribute('data-status');\r\n        const cardId = el.getAttribute('data-id');\r\n        this.updateCardStatus(cardId, newStatus); // Update the card's status\r\n      });\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\nconstructor(props) {\r\nsuper(props);\r\nconst clients = this.getClients();\r\nthis.state = {\r\nclients: {\r\nbacklog: clients.filter(client => client.status === 'backlog'),\r\ninProgress: clients.filter(client => client.status === 'in-progress'),\r\ncomplete: clients.filter(client => client.status === 'complete'),\r\n}\r\n};\r\nthis.swimlanes = {\r\nbacklog: React.createRef(),\r\ninProgress: React.createRef(),\r\ncomplete: React.createRef(),\r\n};\r\nthis.drake = null; // Initialize dragula instance\r\n}\r\n\r\ngetClients() {\r\nreturn [\r\n['1','Stark, White and Abbott','Cloned Optimal Architecture', 'backlog'],\r\n['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n].map(companyDetails => ({\r\nid: companyDetails?.[0],\r\nname: companyDetails?.[1],\r\ndescription: companyDetails?.[2],\r\nstatus: companyDetails?.[3],\r\n})).filter(client => client.id); // Ensure no undefined clients\r\n}\r\n\r\nupdateCardStatus(cardId, newStatus) {\r\nthis.setState(prevState => {\r\nconst updatedClients = { ...prevState.clients };\r\nlet cardToMove = null;\r\nlet previousStatus = null;\r\n\r\n// Find and remove the card from its old status\r\n  Object.keys(updatedClients).forEach(status => {\r\n    const cardIndex = updatedClients?.[status]?.findIndex(client => client.id === cardId);\r\n    if (cardIndex !== -1) {\r\n      // Create a copy of the card before removing\r\n      cardToMove = { ...updatedClients?.[status]?.[cardIndex] };\r\n      updatedClients?.[status]?.splice(cardIndex, 1);\r\n      previousStatus = status;\r\n    }\r\n  });\r\n\r\n  // Update the card's status if found\r\n  if (cardToMove) {\r\n    cardToMove.status = newStatus;\r\n    if (!updatedClients?.[newStatus]) {\r\n      updatedClients?.[newStatus] = [];\r\n    }\r\n    updatedClients?.[newStatus]?.push(cardToMove);\r\n  }\r\n\r\n  return { clients: updatedClients };\r\n});\r\n}\r\n\r\ncomponentDidMount() {\r\n     this.drake = Dragula([\r\n        this.swimlanes.backlog.current,\r\n        this.swimlanes.inProgress.current,\r\n        this.swimlanes.complete.current,\r\n      ]);\r\n      this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      this.drake.remove();\r\n    }\r\n  \r\n    \r\n    Change the status of client when a Card is moved\r\n   \r\n    updateClient(el, target, _, sibling) {\r\n      // Reverting DOM changes from Dragula\r\n      this.drake.cancel(true);\r\n  \r\n      // Find out which swimlane the Card was moved to\r\n      let targetSwimlane = 'backlog';\r\n      if (target === this.swimlanes.inProgress.current) {\r\n        targetSwimlane = 'in-progress';\r\n      } else if (target === this.swimlanes.complete.current) {\r\n        targetSwimlane = 'complete';\r\n      }\r\n  \r\n      // Create a new clients array\r\n      const clientsList = [\r\n        ...this.state.clients.backlog,\r\n        ...this.state.clients.inProgress,\r\n        ...this.state.clients.complete,\r\n      ];\r\n      const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n      const clientThatMovedClone = {\r\n        ...clientThatMoved,\r\n        status: targetSwimlane,\r\n      };\r\n  \r\n      // Remove ClientThatMoved from the clientsList\r\n      const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);\r\n  \r\n      // Place ClientThatMoved just before the sibling client, keeping the order\r\n      const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n      updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);\r\n  \r\n      // Update React state to reflect changes\r\n      this.setState({\r\n        clients: {\r\n          backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),\r\n          inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),\r\n          complete: updatedClients.filter(client => client.status && client.status === 'complete'),\r\n        }\r\n      });\r\n    }\r\n}\r\n  \r\n\r\n*/\n\nimport React from 'react';\nimport 'dragula/dist/dragula.css';\nimport Swimlane from './Swimlane';\nimport './Board.css';\nimport dragula from 'dragula';\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    const clients = this.getClients();\n    this.state = {\n      clients: {\n        backlog: clients.filter(client => client.status === 'backlog'),\n        inProgress: clients.filter(client => client.status === 'in-progress'),\n        complete: clients.filter(client => client.status === 'complete')\n      }\n    };\n\n    // Refs for each swimlane\n    this.swimlanes = {\n      backlog: /*#__PURE__*/React.createRef(),\n      inProgress: /*#__PURE__*/React.createRef(),\n      complete: /*#__PURE__*/React.createRef()\n    };\n    this.drake = null; // Initialize dragula instance\n  }\n\n  // Generate a list of clients\n  getClients() {\n    return [['1', 'Stark, White and Abbott', 'Cloned Optimal Architecture', 'backlog'], ['2', 'Wiza LLC', 'Exclusive Bandwidth-Monitored Implementation', 'complete'], ['3', 'Nolan LLC', 'Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'], ['4', 'Thompson PLC', 'Streamlined Regional Knowledgeuser', 'in-progress'], ['5', 'Walker-Williamson', 'Team-Oriented 6Thgeneration Matrix', 'in-progress'], ['6', 'Boehm and Sons', 'Automated Systematic Paradigm', 'backlog'], ['7', 'Runolfsson, Hegmann and Block', 'Integrated Transitional Strategy', 'backlog'], ['8', 'Schumm-Labadie', 'Operative Heuristic Challenge', 'backlog'], ['9', 'Kohler Group', 'Re-Contextualized Multi-Tasking Attitude', 'backlog'], ['10', 'Romaguera Inc', 'Managed Foreground Toolset', 'backlog'], ['11', 'Reilly-King', 'Future-Proofed Interactive Toolset', 'complete'], ['12', 'Emard, Champlin and Runolfsdottir', 'Devolved Needs-Based Capability', 'backlog'], ['13', 'Fritsch, Cronin and Wolff', 'Open-Source 3Rdgeneration Website', 'complete'], ['14', 'Borer LLC', 'Profit-Focused Incremental Orchestration', 'backlog'], ['15', 'Emmerich-Ankunding', 'User-Centric Stable Extranet', 'in-progress'], ['16', 'Willms-Abbott', 'Progressive Bandwidth-Monitored Access', 'in-progress'], ['17', 'Brekke PLC', 'Intuitive User-Facing Customerloyalty', 'complete'], ['18', 'Bins, Toy and Klocko', 'Integrated Assymetric Software', 'backlog'], ['19', 'Hodkiewicz-Hayes', 'Programmable Systematic Securedline', 'backlog'], ['20', 'Murphy, Lang and Ferry', 'Organized Explicit Access', 'backlog']];\n  }\n\n  // Update the status of a card when it is dropped into a new swimlane\n  updateCardStatus(cardId, newStatus) {\n    this.setState(prevState => {\n      const updatedClients = {\n        ...prevState.clients\n      };\n      let cardToMove = null;\n\n      // Find and remove the card from its old status\n      Object.keys(updatedClients).forEach(status => {\n        const cardIndex = updatedClients[status].findIndex(client => client.id === cardId);\n        if (cardIndex !== -1) {\n          // Create a copy of the card before removing\n          cardToMove = {\n            ...updatedClients[status][cardIndex]\n          };\n          updatedClients[status].splice(cardIndex, 1);\n        }\n      });\n\n      // If the card is found, update its status and add it to the new swimlane\n      if (cardToMove) {\n        cardToMove.status = newStatus;\n        if (!updatedClients[newStatus]) {\n          updatedClients[newStatus] = [];\n        }\n        updatedClients[newStatus].push(cardToMove);\n      }\n      return {\n        clients: updatedClients\n      };\n    });\n  }\n\n  // Initialize drag-and-drop behavior\n  componentDidMount() {\n    this.drake = dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current]);\n    this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\n  }\n  componentWillUnmount() {\n    this.drake.remove();\n  }\n\n  // Change the status of client when a Card is moved\n  updateClient(el, target, _, sibling) {\n    // Reverting DOM changes from Dragula\n    this.drake.cancel(true);\n\n    // Find out which swimlane the Card was moved to\n    let targetSwimlane = 'backlog';\n    if (target === this.swimlanes.inProgress.current) {\n      targetSwimlane = 'in-progress';\n    } else if (target === this.swimlanes.complete.current) {\n      targetSwimlane = 'complete';\n    }\n\n    // Create a new clients array\n    const clientsList = [...this.state.clients.backlog, ...this.state.clients.inProgress, ...this.state.clients.complete];\n    const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\n    const clientThatMovedClone = {\n      ...clientThatMoved,\n      status: targetSwimlane\n    };\n\n    // Remove ClientThatMoved from the clientsList\n    const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);\n\n    // Place ClientThatMoved just before the sibling client, keeping the order\n    const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\n    updatedClients.splice(index === -1 ? updatedClients.length : index, 0, clientThatMovedClone);\n\n    // Update React state to reflect changes\n    this.setState({\n      clients: {\n        backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),\n        inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),\n        complete: updatedClients.filter(client => client.status && client.status === 'complete')\n      }\n    });\n  }\n\n  // Helper function to get the card background color based on status\n  getCardStyle(status) {\n    switch (status) {\n      case 'backlog':\n        return {\n          backgroundColor: 'grey'\n        };\n      case 'in-progress':\n        return {\n          backgroundColor: 'blue'\n        };\n      case 'complete':\n        return {\n          backgroundColor: 'green'\n        };\n      default:\n        return {};\n    }\n  }\n  renderSwimlane(name, clients, ref) {\n    return /*#__PURE__*/React.createElement(Swimlane, {\n      name: name,\n      clients: clients.map(client => ({\n        ...client,\n        style: this.getCardStyle(client.status) // Pass the card style here\n      })),\n      dragulaRef: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 7\n      }\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)))));\n  }\n}","map":{"version":3,"names":["React","Swimlane","dragula","Board","Component","constructor","props","clients","getClients","state","backlog","filter","client","status","inProgress","complete","swimlanes","createRef","drake","updateCardStatus","cardId","newStatus","setState","prevState","updatedClients","cardToMove","Object","keys","forEach","cardIndex","findIndex","id","splice","push","componentDidMount","current","on","el","target","source","sibling","updateClient","componentWillUnmount","remove","_","cancel","targetSwimlane","clientsList","clientThatMoved","find","dataset","clientThatMovedClone","index","length","getCardStyle","backgroundColor","renderSwimlane","name","ref","createElement","map","style","dragulaRef","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","render","className"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Board.js"],"sourcesContent":["/*import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      }\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  getClients() {\r\n    return [\r\n      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'in-progress'],\r\n      ['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n      ['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n      ['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n      ['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n      ['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n      ['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n      ['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n      ['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n      ['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n    ].map(companyDetails => ({\r\n      id: companyDetails[0],\r\n      name: companyDetails[1],\r\n      description: companyDetails[2],\r\n      status: companyDetails[3],\r\n    }));\r\n  }\r\n\r\n  updateCardStatus(cardId, newStatus) {\r\n    const clients = { ...this.state.clients };\r\n\r\n    // Ensure the target status exists\r\n    if (!clients[newStatus]) {\r\n      console.error(`Invalid status: ${newStatus}`);\r\n      return;\r\n    }\r\n\r\n    // Find and remove the card from its old status\r\n    let cardToMove = null;\r\n    Object.keys(clients).forEach(status => {\r\n      const cardIndex = clients[status].findIndex(client => client.id === cardId);\r\n      if (cardIndex !== -1) {\r\n        // Remove card from the old swimlane\r\n        [cardToMove] = clients[status].splice(cardIndex, 1);\r\n        cardToMove.status = newStatus; // Update card's status\r\n      }\r\n    });\r\n\r\n    // Add the card to the new swimlane\r\n    if (cardToMove) {\r\n      clients[newStatus].push(cardToMove);\r\n      this.setState({ clients });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current])\r\n      .on('drop', (el, target) => {\r\n        const newStatus = target.getAttribute('data-status');\r\n        const cardId = el.getAttribute('data-id');\r\n        this.updateCardStatus(cardId, newStatus); // Update the card's status\r\n      });\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\nconstructor(props) {\r\nsuper(props);\r\nconst clients = this.getClients();\r\nthis.state = {\r\nclients: {\r\nbacklog: clients.filter(client => client.status === 'backlog'),\r\ninProgress: clients.filter(client => client.status === 'in-progress'),\r\ncomplete: clients.filter(client => client.status === 'complete'),\r\n}\r\n};\r\nthis.swimlanes = {\r\nbacklog: React.createRef(),\r\ninProgress: React.createRef(),\r\ncomplete: React.createRef(),\r\n};\r\nthis.drake = null; // Initialize dragula instance\r\n}\r\n\r\ngetClients() {\r\nreturn [\r\n['1','Stark, White and Abbott','Cloned Optimal Architecture', 'backlog'],\r\n['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n].map(companyDetails => ({\r\nid: companyDetails?.[0],\r\nname: companyDetails?.[1],\r\ndescription: companyDetails?.[2],\r\nstatus: companyDetails?.[3],\r\n})).filter(client => client.id); // Ensure no undefined clients\r\n}\r\n\r\nupdateCardStatus(cardId, newStatus) {\r\nthis.setState(prevState => {\r\nconst updatedClients = { ...prevState.clients };\r\nlet cardToMove = null;\r\nlet previousStatus = null;\r\n\r\n// Find and remove the card from its old status\r\n  Object.keys(updatedClients).forEach(status => {\r\n    const cardIndex = updatedClients?.[status]?.findIndex(client => client.id === cardId);\r\n    if (cardIndex !== -1) {\r\n      // Create a copy of the card before removing\r\n      cardToMove = { ...updatedClients?.[status]?.[cardIndex] };\r\n      updatedClients?.[status]?.splice(cardIndex, 1);\r\n      previousStatus = status;\r\n    }\r\n  });\r\n\r\n  // Update the card's status if found\r\n  if (cardToMove) {\r\n    cardToMove.status = newStatus;\r\n    if (!updatedClients?.[newStatus]) {\r\n      updatedClients?.[newStatus] = [];\r\n    }\r\n    updatedClients?.[newStatus]?.push(cardToMove);\r\n  }\r\n\r\n  return { clients: updatedClients };\r\n});\r\n}\r\n\r\ncomponentDidMount() {\r\n     this.drake = Dragula([\r\n        this.swimlanes.backlog.current,\r\n        this.swimlanes.inProgress.current,\r\n        this.swimlanes.complete.current,\r\n      ]);\r\n      this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      this.drake.remove();\r\n    }\r\n  \r\n    \r\n    Change the status of client when a Card is moved\r\n   \r\n    updateClient(el, target, _, sibling) {\r\n      // Reverting DOM changes from Dragula\r\n      this.drake.cancel(true);\r\n  \r\n      // Find out which swimlane the Card was moved to\r\n      let targetSwimlane = 'backlog';\r\n      if (target === this.swimlanes.inProgress.current) {\r\n        targetSwimlane = 'in-progress';\r\n      } else if (target === this.swimlanes.complete.current) {\r\n        targetSwimlane = 'complete';\r\n      }\r\n  \r\n      // Create a new clients array\r\n      const clientsList = [\r\n        ...this.state.clients.backlog,\r\n        ...this.state.clients.inProgress,\r\n        ...this.state.clients.complete,\r\n      ];\r\n      const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n      const clientThatMovedClone = {\r\n        ...clientThatMoved,\r\n        status: targetSwimlane,\r\n      };\r\n  \r\n      // Remove ClientThatMoved from the clientsList\r\n      const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);\r\n  \r\n      // Place ClientThatMoved just before the sibling client, keeping the order\r\n      const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n      updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);\r\n  \r\n      // Update React state to reflect changes\r\n      this.setState({\r\n        clients: {\r\n          backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),\r\n          inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),\r\n          complete: updatedClients.filter(client => client.status && client.status === 'complete'),\r\n        }\r\n      });\r\n    }\r\n}\r\n  \r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      },\r\n    };\r\n\r\n    // Refs for each swimlane\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n\r\n    this.drake = null; // Initialize dragula instance\r\n  }\r\n\r\n  // Generate a list of clients\r\n  getClients() {\r\n    return [\r\n      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'backlog'],\r\n['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n];\r\n}\r\n\r\n  // Update the status of a card when it is dropped into a new swimlane\r\n  updateCardStatus(cardId, newStatus) {\r\n    this.setState(prevState => {\r\n      const updatedClients = { ...prevState.clients };\r\n      let cardToMove = null;\r\n\r\n      // Find and remove the card from its old status\r\n      Object.keys(updatedClients).forEach(status => {\r\n        const cardIndex = updatedClients[status].findIndex(client => client.id === cardId);\r\n        if (cardIndex !== -1) {\r\n          // Create a copy of the card before removing\r\n          cardToMove = { ...updatedClients[status][cardIndex] };\r\n          updatedClients[status].splice(cardIndex, 1);\r\n        }\r\n      });\r\n\r\n      // If the card is found, update its status and add it to the new swimlane\r\n      if (cardToMove) {\r\n        cardToMove.status = newStatus;\r\n        if (!updatedClients[newStatus]) {\r\n          updatedClients[newStatus] = [];\r\n        }\r\n        updatedClients[newStatus].push(cardToMove);\r\n      }\r\n\r\n      return { clients: updatedClients };\r\n    });\r\n  }\r\n\r\n  // Initialize drag-and-drop behavior\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n    this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.drake.remove();\r\n  }\r\n\r\n  // Change the status of client when a Card is moved\r\n  updateClient(el, target, _, sibling) {\r\n    // Reverting DOM changes from Dragula\r\n    this.drake.cancel(true);\r\n\r\n    // Find out which swimlane the Card was moved to\r\n    let targetSwimlane = 'backlog';\r\n    if (target === this.swimlanes.inProgress.current) {\r\n      targetSwimlane = 'in-progress';\r\n    } else if (target === this.swimlanes.complete.current) {\r\n      targetSwimlane = 'complete';\r\n    }\r\n\r\n    // Create a new clients array\r\n    const clientsList = [\r\n      ...this.state.clients.backlog,\r\n      ...this.state.clients.inProgress,\r\n      ...this.state.clients.complete,\r\n    ];\r\n    const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n    const clientThatMovedClone = {\r\n      ...clientThatMoved,\r\n      status: targetSwimlane,\r\n    };\r\n\r\n    // Remove ClientThatMoved from the clientsList\r\n    const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);\r\n\r\n    // Place ClientThatMoved just before the sibling client, keeping the order\r\n    const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n    updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);\r\n\r\n    // Update React state to reflect changes\r\n    this.setState({\r\n      clients: {\r\n        backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),\r\n        inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),\r\n        complete: updatedClients.filter(client => client.status && client.status === 'complete'),\r\n      }\r\n    });\r\n  }\r\n\r\n  // Helper function to get the card background color based on status\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog':\r\n        return { backgroundColor: 'grey' };\r\n      case 'in-progress':\r\n        return { backgroundColor: 'blue' };\r\n      case 'complete':\r\n        return { backgroundColor: 'green' };\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients.map(client => ({\r\n          ...client,\r\n          style: this.getCardStyle(client.status),  // Pass the card style here\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}