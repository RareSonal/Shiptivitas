{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator-React-advanced\\\\Shiptivitas\\\\frontend\\\\src\\\\Card.js\";\nimport React from 'react';\nimport './Card.css'; // Make sure you have styles defined for cards\n\nexport default function Card(_ref) {\n  let {\n    id,\n    name,\n    description,\n    status\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Card\",\n    \"data-id\": id,\n    style: {\n      backgroundColor: getCardColor(status)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, description));\n}\n\n// Helper function to get color based on card status\n_c = Card;\nfunction getCardColor(status) {\n  switch (status) {\n    case 'backlog':\n      return '#D3D3D3';\n    // Grey for backlog\n    case 'in-progress':\n      return '#ADD8E6';\n    // Light blue for in-progress\n    case 'complete':\n      return '#98FB98';\n    // Light green for complete\n    default:\n      return '#FFFFFF';\n    // Default white background\n  }\n}\n\n/*import React from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends React.Component {\r\n  render() {\r\n    // Default card class\r\n    let className = ['Card'];\r\n\r\n    // Apply different colors based on the status of the card\r\n    if (this.props.status === 'backlog') {\r\n      className.push('Card-grey'); // For backlog status\r\n    } else if (this.props.status === 'in-progress') {\r\n      className.push('Card-blue'); // For in-progress status\r\n    } else if (this.props.status === 'complete') {\r\n      className.push('Card-green'); // For complete status\r\n    }\r\n\r\n    return (\r\n      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>\r\n        <div className=\"Card-title\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n} */\n/*\r\nimport React from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends React.Component {\r\n  render() {\r\n    // Mapping statuses to corresponding classes\r\n    const statusClassMap = {\r\n      backlog: 'Card-grey',\r\n      'in-progress': 'Card-blue',\r\n      complete: 'Card-green',\r\n    };\r\n\r\n    // Get the appropriate class for the card based on status\r\n    const className = ['Card', statusClassMap[this.props.status] || '']; // Default to empty string if no status matches\r\n\r\n    return (\r\n      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>\r\n        <div className=\"Card-title\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","Card","_ref","id","name","description","status","createElement","className","style","backgroundColor","getCardColor","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator-React-advanced/Shiptivitas/frontend/src/Card.js"],"sourcesContent":["import React from 'react';\r\nimport './Card.css'; // Make sure you have styles defined for cards\r\n\r\nexport default function Card({ id, name, description, status }) {\r\n  return (\r\n    <div className=\"Card\" data-id={id} style={{ backgroundColor: getCardColor(status) }}>\r\n      <h5>{name}</h5>\r\n      <p>{description}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function to get color based on card status\r\nfunction getCardColor(status) {\r\n  switch (status) {\r\n    case 'backlog':\r\n      return '#D3D3D3'; // Grey for backlog\r\n    case 'in-progress':\r\n      return '#ADD8E6'; // Light blue for in-progress\r\n    case 'complete':\r\n      return '#98FB98'; // Light green for complete\r\n    default:\r\n      return '#FFFFFF'; // Default white background\r\n  }\r\n}\r\n\r\n\r\n/*import React from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends React.Component {\r\n  render() {\r\n    // Default card class\r\n    let className = ['Card'];\r\n\r\n    // Apply different colors based on the status of the card\r\n    if (this.props.status === 'backlog') {\r\n      className.push('Card-grey'); // For backlog status\r\n    } else if (this.props.status === 'in-progress') {\r\n      className.push('Card-blue'); // For in-progress status\r\n    } else if (this.props.status === 'complete') {\r\n      className.push('Card-green'); // For complete status\r\n    }\r\n\r\n    return (\r\n      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>\r\n        <div className=\"Card-title\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n} */\r\n/*\r\nimport React from 'react';\r\nimport './Card.css';\r\n\r\nexport default class Card extends React.Component {\r\n  render() {\r\n    // Mapping statuses to corresponding classes\r\n    const statusClassMap = {\r\n      backlog: 'Card-grey',\r\n      'in-progress': 'Card-blue',\r\n      complete: 'Card-green',\r\n    };\r\n\r\n    // Get the appropriate class for the card based on status\r\n    const className = ['Card', statusClassMap[this.props.status] || '']; // Default to empty string if no status matches\r\n\r\n    return (\r\n      <div className={className.join(' ')} data-id={this.props.id} data-status={this.props.status}>\r\n        <div className=\"Card-title\">{this.props.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY,CAAC,CAAC;;AAErB,eAAe,SAASC,IAAIA,CAAAC,IAAA,EAAoC;EAAA,IAAnC;IAAEC,EAAE;IAAEC,IAAI;IAAEC,WAAW;IAAEC;EAAO,CAAC,GAAAJ,IAAA;EAC5D,oBACEF,KAAA,CAAAO,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAC,WAASL,EAAG;IAACM,KAAK,EAAE;MAAEC,eAAe,EAAEC,YAAY,CAACL,MAAM;IAAE,CAAE;IAAAM,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClFjB,KAAA,CAAAO,aAAA;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAKb,IAAS,CAAC,eACfJ,KAAA,CAAAO,aAAA;IAAAK,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAIZ,WAAe,CAChB,CAAC;AAEV;;AAEA;AAAAa,EAAA,GATwBjB,IAAI;AAU5B,SAASU,YAAYA,CAACL,MAAM,EAAE;EAC5B,QAAQA,MAAM;IACZ,KAAK,SAAS;MACZ,OAAO,SAAS;IAAE;IACpB,KAAK,aAAa;MAChB,OAAO,SAAS;IAAE;IACpB,KAAK,UAAU;MACb,OAAO,SAAS;IAAE;IACpB;MACE,OAAO,SAAS;IAAE;EACtB;AACF;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}