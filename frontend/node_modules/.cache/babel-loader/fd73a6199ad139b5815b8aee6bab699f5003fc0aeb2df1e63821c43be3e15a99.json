{"ast":null,"code":"import React from'react';import Card from'./Card';import'./Swimlane.css';import Dragula from'dragula';export default class Swimlane extends React.Component{constructor(props){super(props);this.state={clients:this.props.clients};}componentDidMount(){// Initialize drag-and-drop functionality using Dragula\nconst container=this.props.dragulaRef.current;// Configure dragula to handle card dragging\nconst drake=Dragula([container]);// Handle when a card is dropped in another swimlane\ndrake.on('drop',(el,target,source,sibling)=>{const cardId=el.dataset.id;const newSwimlane=target.dataset.swimlane;// Assuming each swimlane has a dataset with its name\nthis.updateCardStatus(cardId,newSwimlane);});}updateCardStatus(cardId,newStatus){// Update the status of the card that was dropped\nconst updatedClients=this.state.clients.map(client=>{if(client.id===cardId){client.status=newStatus;}return client;});this.setState({clients:updatedClients});}render(){const cards=this.state.clients.map(client=>{return/*#__PURE__*/React.createElement(Card,{key:client.id,id:client.id,name:client.name,description:client.description,status:client.status});});return/*#__PURE__*/React.createElement(\"div\",{className:\"Swimlane-column\",\"data-swimlane\":this.props.name},/*#__PURE__*/React.createElement(\"div\",{className:\"Swimlane-title\"},this.props.name),/*#__PURE__*/React.createElement(\"div\",{className:\"Swimlane-dragColumn\",ref:this.props.dragulaRef},cards));}}","map":{"version":3,"names":["React","Card","Dragula","Swimlane","Component","constructor","props","state","clients","componentDidMount","container","dragulaRef","current","drake","on","el","target","source","sibling","cardId","dataset","id","newSwimlane","swimlane","updateCardStatus","newStatus","updatedClients","map","client","status","setState","render","cards","createElement","key","name","description","className","ref"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Swimlane.js"],"sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\nimport './Swimlane.css';\r\nimport Dragula from 'dragula';\r\n\r\nexport default class Swimlane extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      clients: this.props.clients,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Initialize drag-and-drop functionality using Dragula\r\n    const container = this.props.dragulaRef.current;\r\n    \r\n    // Configure dragula to handle card dragging\r\n    const drake = Dragula([container]);\r\n\r\n    // Handle when a card is dropped in another swimlane\r\n    drake.on('drop', (el, target, source, sibling) => {\r\n      const cardId = el.dataset.id;\r\n      const newSwimlane = target.dataset.swimlane; // Assuming each swimlane has a dataset with its name\r\n      this.updateCardStatus(cardId, newSwimlane);\r\n    });\r\n  }\r\n\r\n  updateCardStatus(cardId, newStatus) {\r\n    // Update the status of the card that was dropped\r\n    const updatedClients = this.state.clients.map(client => {\r\n      if (client.id === cardId) {\r\n        client.status = newStatus;\r\n      }\r\n      return client;\r\n    });\r\n\r\n    this.setState({ clients: updatedClients });\r\n  }\r\n\r\n  render() {\r\n    const cards = this.state.clients.map(client => {\r\n      return (\r\n        <Card\r\n          key={client.id}\r\n          id={client.id}\r\n          name={client.name}\r\n          description={client.description}\r\n          status={client.status}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"Swimlane-column\" data-swimlane={this.props.name}>\r\n        <div className=\"Swimlane-title\">{this.props.name}</div>\r\n        <div className=\"Swimlane-dragColumn\" ref={this.props.dragulaRef}>\r\n          {cards}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,gBAAgB,CACvB,MAAO,CAAAC,OAAO,KAAM,SAAS,CAE7B,cAAe,MAAM,CAAAC,QAAQ,QAAS,CAAAH,KAAK,CAACI,SAAU,CACpDC,WAAWA,CAACC,KAAK,CAAE,CACjB,KAAK,CAACA,KAAK,CAAC,CACZ,IAAI,CAACC,KAAK,CAAG,CACXC,OAAO,CAAE,IAAI,CAACF,KAAK,CAACE,OACtB,CAAC,CACH,CAEAC,iBAAiBA,CAAA,CAAG,CAClB;AACA,KAAM,CAAAC,SAAS,CAAG,IAAI,CAACJ,KAAK,CAACK,UAAU,CAACC,OAAO,CAE/C;AACA,KAAM,CAAAC,KAAK,CAAGX,OAAO,CAAC,CAACQ,SAAS,CAAC,CAAC,CAElC;AACAG,KAAK,CAACC,EAAE,CAAC,MAAM,CAAE,CAACC,EAAE,CAAEC,MAAM,CAAEC,MAAM,CAAEC,OAAO,GAAK,CAChD,KAAM,CAAAC,MAAM,CAAGJ,EAAE,CAACK,OAAO,CAACC,EAAE,CAC5B,KAAM,CAAAC,WAAW,CAAGN,MAAM,CAACI,OAAO,CAACG,QAAQ,CAAE;AAC7C,IAAI,CAACC,gBAAgB,CAACL,MAAM,CAAEG,WAAW,CAAC,CAC5C,CAAC,CAAC,CACJ,CAEAE,gBAAgBA,CAACL,MAAM,CAAEM,SAAS,CAAE,CAClC;AACA,KAAM,CAAAC,cAAc,CAAG,IAAI,CAACnB,KAAK,CAACC,OAAO,CAACmB,GAAG,CAACC,MAAM,EAAI,CACtD,GAAIA,MAAM,CAACP,EAAE,GAAKF,MAAM,CAAE,CACxBS,MAAM,CAACC,MAAM,CAAGJ,SAAS,CAC3B,CACA,MAAO,CAAAG,MAAM,CACf,CAAC,CAAC,CAEF,IAAI,CAACE,QAAQ,CAAC,CAAEtB,OAAO,CAAEkB,cAAe,CAAC,CAAC,CAC5C,CAEAK,MAAMA,CAAA,CAAG,CACP,KAAM,CAAAC,KAAK,CAAG,IAAI,CAACzB,KAAK,CAACC,OAAO,CAACmB,GAAG,CAACC,MAAM,EAAI,CAC7C,mBACE5B,KAAA,CAAAiC,aAAA,CAAChC,IAAI,EACHiC,GAAG,CAAEN,MAAM,CAACP,EAAG,CACfA,EAAE,CAAEO,MAAM,CAACP,EAAG,CACdc,IAAI,CAAEP,MAAM,CAACO,IAAK,CAClBC,WAAW,CAAER,MAAM,CAACQ,WAAY,CAChCP,MAAM,CAAED,MAAM,CAACC,MAAO,CACvB,CAAC,CAEN,CAAC,CAAC,CAEF,mBACE7B,KAAA,CAAAiC,aAAA,QAAKI,SAAS,CAAC,iBAAiB,CAAC,gBAAe,IAAI,CAAC/B,KAAK,CAAC6B,IAAK,eAC9DnC,KAAA,CAAAiC,aAAA,QAAKI,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC/B,KAAK,CAAC6B,IAAU,CAAC,cACvDnC,KAAA,CAAAiC,aAAA,QAAKI,SAAS,CAAC,qBAAqB,CAACC,GAAG,CAAE,IAAI,CAAChC,KAAK,CAACK,UAAW,EAC7DqB,KACE,CACF,CAAC,CAEV,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}