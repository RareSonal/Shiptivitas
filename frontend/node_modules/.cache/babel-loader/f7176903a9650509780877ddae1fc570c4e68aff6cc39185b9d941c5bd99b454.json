{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator\\\\Shiptivity\\\\src\\\\Swimlane.js\";\nimport React from 'react';\nimport Card from './Card';\nimport './Swimlane.css';\nimport Dragula from 'dragula';\nexport default class Swimlane extends React.Component {\n  componentDidMount() {\n    const container = this.props.dragulaRef.current;\n    if (container) {\n      const drake = Dragula([container]);\n\n      // Handle when a card is dropped in another swimlane\n      drake.on('drop', (el, target, source, sibling) => {\n        const cardId = el.dataset.id;\n        const newSwimlane = target.dataset.swimlane; // Assuming each swimlane has a dataset with its name\n        this.props.updateClientStatus(cardId, newSwimlane);\n      });\n    }\n  }\n  render() {\n    const cards = this.props.clients.map(client => {\n      return /*#__PURE__*/React.createElement(Card, {\n        key: client.id,\n        id: client.id,\n        name: client.name,\n        description: client.description,\n        status: client.status,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Swimlane-column\",\n      \"data-swimlane\": this.props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Swimlane-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, this.props.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Swimlane-dragColumn\",\n      ref: this.props.dragulaRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, cards));\n  }\n}","map":{"version":3,"names":["React","Card","Dragula","Swimlane","Component","componentDidMount","container","props","dragulaRef","current","drake","on","el","target","source","sibling","cardId","dataset","id","newSwimlane","swimlane","updateClientStatus","render","cards","clients","map","client","createElement","key","name","description","status","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","ref"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Swimlane.js"],"sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\nimport './Swimlane.css';\r\nimport Dragula from 'dragula';\r\n\r\nexport default class Swimlane extends React.Component {\r\n  componentDidMount() {\r\n    const container = this.props.dragulaRef.current;\r\n\r\n    if (container) {\r\n      const drake = Dragula([container]);\r\n\r\n      // Handle when a card is dropped in another swimlane\r\n      drake.on('drop', (el, target, source, sibling) => {\r\n        const cardId = el.dataset.id;\r\n        const newSwimlane = target.dataset.swimlane; // Assuming each swimlane has a dataset with its name\r\n        this.props.updateClientStatus(cardId, newSwimlane);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const cards = this.props.clients.map(client => {\r\n      return (\r\n        <Card\r\n          key={client.id}\r\n          id={client.id}\r\n          name={client.name}\r\n          description={client.description}\r\n          status={client.status}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"Swimlane-column\" data-swimlane={this.props.name}>\r\n        <div className=\"Swimlane-title\">{this.props.name}</div>\r\n        <div className=\"Swimlane-dragColumn\" ref={this.props.dragulaRef}>\r\n          {cards}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;AACvB,OAAOC,OAAO,MAAM,SAAS;AAE7B,eAAe,MAAMC,QAAQ,SAASH,KAAK,CAACI,SAAS,CAAC;EACpDC,iBAAiBA,CAAA,EAAG;IAClB,MAAMC,SAAS,GAAG,IAAI,CAACC,KAAK,CAACC,UAAU,CAACC,OAAO;IAE/C,IAAIH,SAAS,EAAE;MACb,MAAMI,KAAK,GAAGR,OAAO,CAAC,CAACI,SAAS,CAAC,CAAC;;MAElC;MACAI,KAAK,CAACC,EAAE,CAAC,MAAM,EAAE,CAACC,EAAE,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,KAAK;QAChD,MAAMC,MAAM,GAAGJ,EAAE,CAACK,OAAO,CAACC,EAAE;QAC5B,MAAMC,WAAW,GAAGN,MAAM,CAACI,OAAO,CAACG,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAACb,KAAK,CAACc,kBAAkB,CAACL,MAAM,EAAEG,WAAW,CAAC;MACpD,CAAC,CAAC;IACJ;EACF;EAEAG,MAAMA,CAAA,EAAG;IACP,MAAMC,KAAK,GAAG,IAAI,CAAChB,KAAK,CAACiB,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;MAC7C,oBACE1B,KAAA,CAAA2B,aAAA,CAAC1B,IAAI;QACH2B,GAAG,EAAEF,MAAM,CAACR,EAAG;QACfA,EAAE,EAAEQ,MAAM,CAACR,EAAG;QACdW,IAAI,EAAEH,MAAM,CAACG,IAAK;QAClBC,WAAW,EAAEJ,MAAM,CAACI,WAAY;QAChCC,MAAM,EAAEL,MAAM,CAACK,MAAO;QAAAC,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACvB,CAAC;IAEN,CAAC,CAAC;IAEF,oBACErC,KAAA,CAAA2B,aAAA;MAAKW,SAAS,EAAC,iBAAiB;MAAC,iBAAe,IAAI,CAAC/B,KAAK,CAACsB,IAAK;MAAAG,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC9DrC,KAAA,CAAA2B,aAAA;MAAKW,SAAS,EAAC,gBAAgB;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAE,IAAI,CAAC9B,KAAK,CAACsB,IAAU,CAAC,eACvD7B,KAAA,CAAA2B,aAAA;MAAKW,SAAS,EAAC,qBAAqB;MAACC,GAAG,EAAE,IAAI,CAAChC,KAAK,CAACC,UAAW;MAAAwB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC7Dd,KACE,CACF,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}