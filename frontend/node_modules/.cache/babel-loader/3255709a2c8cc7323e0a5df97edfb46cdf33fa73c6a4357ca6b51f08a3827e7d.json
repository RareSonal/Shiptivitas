{"ast":null,"code":"/*import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      }\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  getClients() {\r\n    return [\r\n      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'in-progress'],\r\n      ['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n      ['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n      ['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n      ['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n      ['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n      ['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n      ['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n      ['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n      ['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n    ].map(companyDetails => ({\r\n      id: companyDetails[0],\r\n      name: companyDetails[1],\r\n      description: companyDetails[2],\r\n      status: companyDetails[3],\r\n    }));\r\n  }\r\n\r\n  updateCardStatus(cardId, newStatus) {\r\n    const clients = { ...this.state.clients };\r\n\r\n    // Ensure the target status exists\r\n    if (!clients[newStatus]) {\r\n      console.error(`Invalid status: ${newStatus}`);\r\n      return;\r\n    }\r\n\r\n    // Find and remove the card from its old status\r\n    let cardToMove = null;\r\n    Object.keys(clients).forEach(status => {\r\n      const cardIndex = clients[status].findIndex(client => client.id === cardId);\r\n      if (cardIndex !== -1) {\r\n        // Remove card from the old swimlane\r\n        [cardToMove] = clients[status].splice(cardIndex, 1);\r\n        cardToMove.status = newStatus; // Update card's status\r\n      }\r\n    });\r\n\r\n    // Add the card to the new swimlane\r\n    if (cardToMove) {\r\n      clients[newStatus].push(cardToMove);\r\n      this.setState({ clients });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current])\r\n      .on('drop', (el, target) => {\r\n        const newStatus = target.getAttribute('data-status');\r\n        const cardId = el.getAttribute('data-id');\r\n        this.updateCardStatus(cardId, newStatus); // Update the card's status\r\n      });\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\nconstructor(props) {\r\nsuper(props);\r\nconst clients = this.getClients();\r\nthis.state = {\r\nclients: {\r\nbacklog: clients.filter(client => client.status === 'backlog'),\r\ninProgress: clients.filter(client => client.status === 'in-progress'),\r\ncomplete: clients.filter(client => client.status === 'complete'),\r\n}\r\n};\r\nthis.swimlanes = {\r\nbacklog: React.createRef(),\r\ninProgress: React.createRef(),\r\ncomplete: React.createRef(),\r\n};\r\nthis.drake = null; // Initialize dragula instance\r\n}\r\n\r\ngetClients() {\r\nreturn [\r\n['1','Stark, White and Abbott','Cloned Optimal Architecture', 'backlog'],\r\n['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n].map(companyDetails => ({\r\nid: companyDetails?.[0],\r\nname: companyDetails?.[1],\r\ndescription: companyDetails?.[2],\r\nstatus: companyDetails?.[3],\r\n})).filter(client => client.id); // Ensure no undefined clients\r\n}\r\n\r\nupdateCardStatus(cardId, newStatus) {\r\nthis.setState(prevState => {\r\nconst updatedClients = { ...prevState.clients };\r\nlet cardToMove = null;\r\nlet previousStatus = null;\r\n\r\n// Find and remove the card from its old status\r\n  Object.keys(updatedClients).forEach(status => {\r\n    const cardIndex = updatedClients?.[status]?.findIndex(client => client.id === cardId);\r\n    if (cardIndex !== -1) {\r\n      // Create a copy of the card before removing\r\n      cardToMove = { ...updatedClients?.[status]?.[cardIndex] };\r\n      updatedClients?.[status]?.splice(cardIndex, 1);\r\n      previousStatus = status;\r\n    }\r\n  });\r\n\r\n  // Update the card's status if found\r\n  if (cardToMove) {\r\n    cardToMove.status = newStatus;\r\n    if (!updatedClients?.[newStatus]) {\r\n      updatedClients?.[newStatus] = [];\r\n    }\r\n    updatedClients?.[newStatus]?.push(cardToMove);\r\n  }\r\n\r\n  return { clients: updatedClients };\r\n});\r\n}\r\n\r\ncomponentDidMount() {\r\n     this.drake = Dragula([\r\n        this.swimlanes.backlog.current,\r\n        this.swimlanes.inProgress.current,\r\n        this.swimlanes.complete.current,\r\n      ]);\r\n      this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      this.drake.remove();\r\n    }\r\n  \r\n    \r\n    Change the status of client when a Card is moved\r\n   \r\n    updateClient(el, target, _, sibling) {\r\n      // Reverting DOM changes from Dragula\r\n      this.drake.cancel(true);\r\n  \r\n      // Find out which swimlane the Card was moved to\r\n      let targetSwimlane = 'backlog';\r\n      if (target === this.swimlanes.inProgress.current) {\r\n        targetSwimlane = 'in-progress';\r\n      } else if (target === this.swimlanes.complete.current) {\r\n        targetSwimlane = 'complete';\r\n      }\r\n  \r\n      // Create a new clients array\r\n      const clientsList = [\r\n        ...this.state.clients.backlog,\r\n        ...this.state.clients.inProgress,\r\n        ...this.state.clients.complete,\r\n      ];\r\n      const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n      const clientThatMovedClone = {\r\n        ...clientThatMoved,\r\n        status: targetSwimlane,\r\n      };\r\n  \r\n      // Remove ClientThatMoved from the clientsList\r\n      const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);\r\n  \r\n      // Place ClientThatMoved just before the sibling client, keeping the order\r\n      const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n      updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);\r\n  \r\n      // Update React state to reflect changes\r\n      this.setState({\r\n        clients: {\r\n          backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),\r\n          inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),\r\n          complete: updatedClients.filter(client => client.status && client.status === 'complete'),\r\n        }\r\n      });\r\n    }\r\n}\r\n  \r\n\r\n*/import React from'react';import'dragula/dist/dragula.css';import Swimlane from'./Swimlane';import'./Board.css';import dragula from'dragula';export default class Board extends React.Component{constructor(props){super(props);const clients=this.getClients();this.state={clients:{backlog:clients.filter(client=>client.status==='backlog'),inProgress:clients.filter(client=>client.status==='in-progress'),complete:clients.filter(client=>client.status==='complete')}};// Refs for each swimlane\nthis.swimlanes={backlog:/*#__PURE__*/React.createRef(),inProgress:/*#__PURE__*/React.createRef(),complete:/*#__PURE__*/React.createRef()};this.drake=null;// Initialize dragula instance\n}// Generate a list of clients\ngetClients(){return[// ... existing client data\n].map(_ref=>{let[id,name,description,status]=_ref;return{id,name,description,status};});}// Update the status of a card when it is dropped into a new swimlane\nupdateCardStatus(cardId,newStatus){this.setState(prevState=>{const updatedClients={...prevState.clients};let cardToMove=null;// Find and remove the card from its old status\nObject.keys(updatedClients).forEach(status=>{const cardIndex=updatedClients[status].findIndex(client=>client.id===cardId);if(cardIndex!==-1){// Create a copy of the card before removing\ncardToMove={...updatedClients[status][cardIndex]};updatedClients[status].splice(cardIndex,1);}});// If the card is found, update its status and add it to the new swimlane\nif(cardToMove){cardToMove.status=newStatus;if(!updatedClients[newStatus]){updatedClients[newStatus]=[];}updatedClients[newStatus].push(cardToMove);}return{clients:updatedClients};});}// Initialize drag-and-drop behavior\ncomponentDidMount(){this.drake=dragula([this.swimlanes.backlog.current,this.swimlanes.inProgress.current,this.swimlanes.complete.current]);this.drake.on('drop',(el,target,source,sibling)=>this.updateClient(el,target,source,sibling));}componentWillUnmount(){this.drake.remove();}//Change the status of client when a Card is moved\nupdateClient(el,target,_,sibling){// Reverting DOM changes from Dragula\nthis.drake.cancel(true);// Find out which swimlane the Card was moved to\nlet targetSwimlane='backlog';if(target===this.swimlanes.inProgress.current){targetSwimlane='in-progress';}else if(target===this.swimlanes.complete.current){targetSwimlane='complete';}// Create a new clients array\nconst clientsList=[...this.state.clients.backlog,...this.state.clients.inProgress,...this.state.clients.complete];const clientThatMoved=clientsList.find(client=>client.id===el.dataset.id);const clientThatMovedClone={...clientThatMoved,status:targetSwimlane};// Remove ClientThatMoved from the clientsList\nconst updatedClients=clientsList.filter(client=>client.id!==clientThatMovedClone.id);// Place ClientThatMoved just before the sibling client, keeping the order\nconst index=updatedClients.findIndex(client=>sibling&&client.id===sibling.dataset.id);updatedClients.splice(index===-1?updatedClients.length:index,0,clientThatMovedClone);// Update React state to reflect changes\nthis.setState({clients:{backlog:updatedClients.filter(client=>!client.status||client.status==='backlog'),inProgress:updatedClients.filter(client=>client.status&&client.status==='in-progress'),complete:updatedClients.filter(client=>client.status&&client.status==='complete')}});}renderSwimlane(name,clients,ref){return/*#__PURE__*/React.createElement(Swimlane,{name:name,clients:clients,dragulaRef:ref});}render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"Board\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container-fluid\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4\"},this.renderSwimlane('Backlog',this.state.clients.backlog,this.swimlanes.backlog)),/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4\"},this.renderSwimlane('In Progress',this.state.clients.inProgress,this.swimlanes.inProgress)),/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4\"},this.renderSwimlane('Complete',this.state.clients.complete,this.swimlanes.complete)))));}}","map":{"version":3,"names":["React","Swimlane","dragula","Board","Component","constructor","props","clients","getClients","state","backlog","filter","client","status","inProgress","complete","swimlanes","createRef","drake","map","_ref","id","name","description","updateCardStatus","cardId","newStatus","setState","prevState","updatedClients","cardToMove","Object","keys","forEach","cardIndex","findIndex","splice","push","componentDidMount","current","on","el","target","source","sibling","updateClient","componentWillUnmount","remove","_","cancel","targetSwimlane","clientsList","clientThatMoved","find","dataset","clientThatMovedClone","index","length","renderSwimlane","ref","createElement","dragulaRef","render","className"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Board.js"],"sourcesContent":["/*import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      }\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  getClients() {\r\n    return [\r\n      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'in-progress'],\r\n      ['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n      ['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n      ['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n      ['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n      ['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n      ['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n      ['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n      ['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n      ['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n    ].map(companyDetails => ({\r\n      id: companyDetails[0],\r\n      name: companyDetails[1],\r\n      description: companyDetails[2],\r\n      status: companyDetails[3],\r\n    }));\r\n  }\r\n\r\n  updateCardStatus(cardId, newStatus) {\r\n    const clients = { ...this.state.clients };\r\n\r\n    // Ensure the target status exists\r\n    if (!clients[newStatus]) {\r\n      console.error(`Invalid status: ${newStatus}`);\r\n      return;\r\n    }\r\n\r\n    // Find and remove the card from its old status\r\n    let cardToMove = null;\r\n    Object.keys(clients).forEach(status => {\r\n      const cardIndex = clients[status].findIndex(client => client.id === cardId);\r\n      if (cardIndex !== -1) {\r\n        // Remove card from the old swimlane\r\n        [cardToMove] = clients[status].splice(cardIndex, 1);\r\n        cardToMove.status = newStatus; // Update card's status\r\n      }\r\n    });\r\n\r\n    // Add the card to the new swimlane\r\n    if (cardToMove) {\r\n      clients[newStatus].push(cardToMove);\r\n      this.setState({ clients });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current])\r\n      .on('drop', (el, target) => {\r\n        const newStatus = target.getAttribute('data-status');\r\n        const cardId = el.getAttribute('data-id');\r\n        this.updateCardStatus(cardId, newStatus); // Update the card's status\r\n      });\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\nconstructor(props) {\r\nsuper(props);\r\nconst clients = this.getClients();\r\nthis.state = {\r\nclients: {\r\nbacklog: clients.filter(client => client.status === 'backlog'),\r\ninProgress: clients.filter(client => client.status === 'in-progress'),\r\ncomplete: clients.filter(client => client.status === 'complete'),\r\n}\r\n};\r\nthis.swimlanes = {\r\nbacklog: React.createRef(),\r\ninProgress: React.createRef(),\r\ncomplete: React.createRef(),\r\n};\r\nthis.drake = null; // Initialize dragula instance\r\n}\r\n\r\ngetClients() {\r\nreturn [\r\n['1','Stark, White and Abbott','Cloned Optimal Architecture', 'backlog'],\r\n['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n].map(companyDetails => ({\r\nid: companyDetails?.[0],\r\nname: companyDetails?.[1],\r\ndescription: companyDetails?.[2],\r\nstatus: companyDetails?.[3],\r\n})).filter(client => client.id); // Ensure no undefined clients\r\n}\r\n\r\nupdateCardStatus(cardId, newStatus) {\r\nthis.setState(prevState => {\r\nconst updatedClients = { ...prevState.clients };\r\nlet cardToMove = null;\r\nlet previousStatus = null;\r\n\r\n// Find and remove the card from its old status\r\n  Object.keys(updatedClients).forEach(status => {\r\n    const cardIndex = updatedClients?.[status]?.findIndex(client => client.id === cardId);\r\n    if (cardIndex !== -1) {\r\n      // Create a copy of the card before removing\r\n      cardToMove = { ...updatedClients?.[status]?.[cardIndex] };\r\n      updatedClients?.[status]?.splice(cardIndex, 1);\r\n      previousStatus = status;\r\n    }\r\n  });\r\n\r\n  // Update the card's status if found\r\n  if (cardToMove) {\r\n    cardToMove.status = newStatus;\r\n    if (!updatedClients?.[newStatus]) {\r\n      updatedClients?.[newStatus] = [];\r\n    }\r\n    updatedClients?.[newStatus]?.push(cardToMove);\r\n  }\r\n\r\n  return { clients: updatedClients };\r\n});\r\n}\r\n\r\ncomponentDidMount() {\r\n     this.drake = Dragula([\r\n        this.swimlanes.backlog.current,\r\n        this.swimlanes.inProgress.current,\r\n        this.swimlanes.complete.current,\r\n      ]);\r\n      this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n      this.drake.remove();\r\n    }\r\n  \r\n    \r\n    Change the status of client when a Card is moved\r\n   \r\n    updateClient(el, target, _, sibling) {\r\n      // Reverting DOM changes from Dragula\r\n      this.drake.cancel(true);\r\n  \r\n      // Find out which swimlane the Card was moved to\r\n      let targetSwimlane = 'backlog';\r\n      if (target === this.swimlanes.inProgress.current) {\r\n        targetSwimlane = 'in-progress';\r\n      } else if (target === this.swimlanes.complete.current) {\r\n        targetSwimlane = 'complete';\r\n      }\r\n  \r\n      // Create a new clients array\r\n      const clientsList = [\r\n        ...this.state.clients.backlog,\r\n        ...this.state.clients.inProgress,\r\n        ...this.state.clients.complete,\r\n      ];\r\n      const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n      const clientThatMovedClone = {\r\n        ...clientThatMoved,\r\n        status: targetSwimlane,\r\n      };\r\n  \r\n      // Remove ClientThatMoved from the clientsList\r\n      const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);\r\n  \r\n      // Place ClientThatMoved just before the sibling client, keeping the order\r\n      const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n      updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);\r\n  \r\n      // Update React state to reflect changes\r\n      this.setState({\r\n        clients: {\r\n          backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),\r\n          inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),\r\n          complete: updatedClients.filter(client => client.status && client.status === 'complete'),\r\n        }\r\n      });\r\n    }\r\n}\r\n  \r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      },\r\n    };\r\n\r\n    // Refs for each swimlane\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n\r\n    this.drake = null; // Initialize dragula instance\r\n  }\r\n\r\n  // Generate a list of clients\r\n  getClients() {\r\n    return [\r\n      // ... existing client data\r\n    ].map(([id, name, description, status]) => ({\r\n      id,\r\n      name,\r\n      description,\r\n      status,\r\n    }));\r\n  }\r\n\r\n  // Update the status of a card when it is dropped into a new swimlane\r\n  updateCardStatus(cardId, newStatus) {\r\n    this.setState(prevState => {\r\n      const updatedClients = { ...prevState.clients };\r\n      let cardToMove = null;\r\n\r\n      // Find and remove the card from its old status\r\n      Object.keys(updatedClients).forEach(status => {\r\n        const cardIndex = updatedClients[status].findIndex(client => client.id === cardId);\r\n        if (cardIndex !== -1) {\r\n          // Create a copy of the card before removing\r\n          cardToMove = { ...updatedClients[status][cardIndex] };\r\n          updatedClients[status].splice(cardIndex, 1);\r\n        }\r\n      });\r\n\r\n      // If the card is found, update its status and add it to the new swimlane\r\n      if (cardToMove) {\r\n        cardToMove.status = newStatus;\r\n        if (!updatedClients[newStatus]) {\r\n          updatedClients[newStatus] = [];\r\n        }\r\n        updatedClients[newStatus].push(cardToMove);\r\n      }\r\n\r\n      return { clients: updatedClients };\r\n    });\r\n  }\r\n\r\n  // Initialize drag-and-drop behavior\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n       this.swimlanes.backlog.current,\r\n       this.swimlanes.inProgress.current,\r\n       this.swimlanes.complete.current,\r\n     ]);\r\n     this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\r\n   }\r\n \r\n   componentWillUnmount() {\r\n     this.drake.remove();\r\n   }\r\n \r\n   \r\n   //Change the status of client when a Card is moved\r\n  \r\n   updateClient(el, target, _, sibling) {\r\n     // Reverting DOM changes from Dragula\r\n     this.drake.cancel(true);\r\n \r\n     // Find out which swimlane the Card was moved to\r\n     let targetSwimlane = 'backlog';\r\n     if (target === this.swimlanes.inProgress.current) {\r\n       targetSwimlane = 'in-progress';\r\n     } else if (target === this.swimlanes.complete.current) {\r\n       targetSwimlane = 'complete';\r\n     }\r\n \r\n     // Create a new clients array\r\n     const clientsList = [\r\n       ...this.state.clients.backlog,\r\n       ...this.state.clients.inProgress,\r\n       ...this.state.clients.complete,\r\n     ];\r\n     const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n     const clientThatMovedClone = {\r\n       ...clientThatMoved,\r\n       status: targetSwimlane,\r\n     };\r\n \r\n     // Remove ClientThatMoved from the clientsList\r\n     const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);\r\n \r\n     // Place ClientThatMoved just before the sibling client, keeping the order\r\n     const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n     updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);\r\n \r\n     // Update React state to reflect changes\r\n     this.setState({\r\n       clients: {\r\n         backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),\r\n         inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),\r\n         complete: updatedClients.filter(client => client.status && client.status === 'complete'),\r\n       }\r\n     });\r\n   }\r\n\r\n   renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n  \r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}