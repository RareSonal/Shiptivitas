{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator-React-advanced\\\\Shiptivitas\\\\frontend\\\\src\\\\Board.js\";\nimport React from 'react';\nimport 'dragula/dist/dragula.css';\nimport Swimlane from './Swimlane'; // Ensure the path is correct\nimport './Board.css';\nimport dragula from 'dragula';\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.swimlanes = {\n      backlog: /*#__PURE__*/React.createRef(),\n      inProgress: /*#__PURE__*/React.createRef(),\n      complete: /*#__PURE__*/React.createRef()\n    };\n  }\n  componentDidMount() {\n    this.drake = dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current]);\n    this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));\n  }\n  componentWillUnmount() {\n    this.drake.remove();\n  }\n  updateClient(el, target, _, sibling) {\n    this.drake.cancel(true);\n    let targetSwimlane = 'backlog';\n    if (target === this.swimlanes.inProgress.current) {\n      targetSwimlane = 'in-progress';\n    } else if (target === this.swimlanes.complete.current) {\n      targetSwimlane = 'complete';\n    }\n    const clientsList = [...this.props.clients.backlog, ...this.props.clients.inProgress, ...this.props.clients.complete];\n    const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\n    const clientThatMovedClone = {\n      ...clientThatMoved,\n      status: targetSwimlane\n    };\n    const updatedClients = clientsList.filter(client => client.id !== clientThatMoved.id);\n    const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\n    updatedClients.splice(index === -1 ? updatedClients.length : index, 0, clientThatMovedClone);\n    this.props.updateClients({\n      backlog: updatedClients.filter(c => c.status === 'backlog'),\n      inProgress: updatedClients.filter(c => c.status === 'in-progress'),\n      complete: updatedClients.filter(c => c.status === 'complete')\n    });\n  }\n  renderSwimlane(name, clients, ref) {\n    return /*#__PURE__*/React.createElement(Swimlane, {\n      name: name,\n      clients: clients,\n      dragulaRef: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    });\n  }\n  render() {\n    const {\n      backlog,\n      inProgress,\n      complete\n    } = this.props.clients;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('Backlog', backlog, this.swimlanes.backlog)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('In Progress', inProgress, this.swimlanes.inProgress)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('Complete', complete, this.swimlanes.complete)))));\n  }\n}\n\n/* import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n    this.drake.on('drop', (el, target, source, sibling) =>\r\n      this.updateClient(el, target, source, sibling)\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.drake.remove();\r\n  }\r\n\r\n  updateClient(el, target, _, sibling) {\r\n    this.drake.cancel(true);\r\n\r\n    let targetSwimlane = 'backlog';\r\n    if (target === this.swimlanes.inProgress.current) {\r\n      targetSwimlane = 'in-progress';\r\n    } else if (target === this.swimlanes.complete.current) {\r\n      targetSwimlane = 'complete';\r\n    }\r\n\r\n    const clientsList = [\r\n      ...this.props.clients.backlog,\r\n      ...this.props.clients.inProgress,\r\n      ...this.props.clients.complete,\r\n    ];\r\n\r\n    const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n    const clientThatMovedClone = { ...clientThatMoved, status: targetSwimlane };\r\n\r\n    const updatedClients = clientsList.filter(client => client.id !== clientThatMoved.id);\r\n\r\n    const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n    updatedClients.splice(index === -1 ? updatedClients.length : index, 0, clientThatMovedClone);\r\n\r\n    this.props.updateClients({\r\n      backlog: updatedClients.filter(c => c.status === 'backlog'),\r\n      inProgress: updatedClients.filter(c => c.status === 'in-progress'),\r\n      complete: updatedClients.filter(c => c.status === 'complete'),\r\n    });\r\n  }\r\n\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog':\r\n        return { backgroundColor: 'grey' };\r\n      case 'in-progress':\r\n        return { backgroundColor: 'blue' };\r\n      case 'complete':\r\n        return { backgroundColor: 'green' };\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients.map(client => ({\r\n          ...client,\r\n          style: this.getCardStyle(client.status),\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { backlog, inProgress, complete } = this.props.clients;\r\n\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/","map":{"version":3,"names":["React","Swimlane","dragula","Board","Component","constructor","props","swimlanes","backlog","createRef","inProgress","complete","componentDidMount","drake","current","on","el","target","source","sibling","updateClient","componentWillUnmount","remove","_","cancel","targetSwimlane","clientsList","clients","clientThatMoved","find","client","id","dataset","clientThatMovedClone","status","updatedClients","filter","index","findIndex","splice","length","updateClients","c","renderSwimlane","name","ref","createElement","dragulaRef","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","render","className"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator-React-advanced/Shiptivitas/frontend/src/Board.js"],"sourcesContent":["import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane'; // Ensure the path is correct\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n\r\n    this.drake.on('drop', (el, target, source, sibling) =>\r\n      this.updateClient(el, target, source, sibling)\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.drake.remove();\r\n  }\r\n\r\n  updateClient(el, target, _, sibling) {\r\n    this.drake.cancel(true);\r\n\r\n    let targetSwimlane = 'backlog';\r\n    if (target === this.swimlanes.inProgress.current) {\r\n      targetSwimlane = 'in-progress';\r\n    } else if (target === this.swimlanes.complete.current) {\r\n      targetSwimlane = 'complete';\r\n    }\r\n\r\n    const clientsList = [\r\n      ...this.props.clients.backlog,\r\n      ...this.props.clients.inProgress,\r\n      ...this.props.clients.complete,\r\n    ];\r\n\r\n    const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n    const clientThatMovedClone = { ...clientThatMoved, status: targetSwimlane };\r\n\r\n    const updatedClients = clientsList.filter(client => client.id !== clientThatMoved.id);\r\n\r\n    const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n    updatedClients.splice(index === -1 ? updatedClients.length : index, 0, clientThatMovedClone);\r\n\r\n    this.props.updateClients({\r\n      backlog: updatedClients.filter(c => c.status === 'backlog'),\r\n      inProgress: updatedClients.filter(c => c.status === 'in-progress'),\r\n      complete: updatedClients.filter(c => c.status === 'complete'),\r\n    });\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { backlog, inProgress, complete } = this.props.clients;\r\n\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/* import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n    this.drake.on('drop', (el, target, source, sibling) =>\r\n      this.updateClient(el, target, source, sibling)\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.drake.remove();\r\n  }\r\n\r\n  updateClient(el, target, _, sibling) {\r\n    this.drake.cancel(true);\r\n\r\n    let targetSwimlane = 'backlog';\r\n    if (target === this.swimlanes.inProgress.current) {\r\n      targetSwimlane = 'in-progress';\r\n    } else if (target === this.swimlanes.complete.current) {\r\n      targetSwimlane = 'complete';\r\n    }\r\n\r\n    const clientsList = [\r\n      ...this.props.clients.backlog,\r\n      ...this.props.clients.inProgress,\r\n      ...this.props.clients.complete,\r\n    ];\r\n\r\n    const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);\r\n    const clientThatMovedClone = { ...clientThatMoved, status: targetSwimlane };\r\n\r\n    const updatedClients = clientsList.filter(client => client.id !== clientThatMoved.id);\r\n\r\n    const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);\r\n    updatedClients.splice(index === -1 ? updatedClients.length : index, 0, clientThatMovedClone);\r\n\r\n    this.props.updateClients({\r\n      backlog: updatedClients.filter(c => c.status === 'backlog'),\r\n      inProgress: updatedClients.filter(c => c.status === 'in-progress'),\r\n      complete: updatedClients.filter(c => c.status === 'complete'),\r\n    });\r\n  }\r\n\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog':\r\n        return { backgroundColor: 'grey' };\r\n      case 'in-progress':\r\n        return { backgroundColor: 'blue' };\r\n      case 'complete':\r\n        return { backgroundColor: 'green' };\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients.map(client => ({\r\n          ...client,\r\n          style: this.getCardStyle(client.status),\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { backlog, inProgress, complete } = this.props.clients;\r\n\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}