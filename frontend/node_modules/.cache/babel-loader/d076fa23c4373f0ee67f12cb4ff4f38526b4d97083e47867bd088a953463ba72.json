{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator\\\\Shiptivity\\\\src\\\\Swimlane.js\";\nimport React from 'react';\nimport Card from './Card';\nimport './Swimlane.css';\nimport Dragula from 'dragula';\nexport default class Swimlane extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clients: this.props.clients\n    };\n  }\n\n  // Update card status when dropped in a new swimlane\n  updateCardStatus(cardId, newStatus) {\n    const updatedClients = this.state.clients.map(client => {\n      if (client.id === cardId) {\n        client.status = newStatus; // Update the card's status based on the new swimlane\n      }\n      return client;\n    });\n    this.setState({\n      clients: updatedClients\n    });\n  }\n\n  // Initialize drag-and-drop functionality with Dragula\n  componentDidMount() {\n    const container = this.props.dragulaRef.current;\n    if (container) {\n      const drake = Dragula([container]);\n\n      // Handle when a card is dropped in another swimlane\n      drake.on('drop', (el, target) => {\n        const cardId = el.dataset.id;\n        const newSwimlane = target.dataset.swimlane; // Target swimlane is in the data attribute\n        this.updateCardStatus(cardId, newSwimlane);\n      });\n    }\n  }\n  render() {\n    const cards = this.state.clients.map(client => /*#__PURE__*/React.createElement(Card, {\n      key: client.id,\n      id: client.id,\n      name: client.name,\n      description: client.description,\n      status: client.status,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Swimlane-column\",\n      \"data-swimlane\": this.props.name,\n      ref: this.props.dragulaRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Swimlane-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, this.props.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Swimlane-dragColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, cards));\n  }\n}","map":{"version":3,"names":["React","Card","Dragula","Swimlane","Component","constructor","props","state","clients","updateCardStatus","cardId","newStatus","updatedClients","map","client","id","status","setState","componentDidMount","container","dragulaRef","current","drake","on","el","target","dataset","newSwimlane","swimlane","render","cards","createElement","key","name","description","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","ref"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Swimlane.js"],"sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\nimport './Swimlane.css';\r\nimport Dragula from 'dragula';\r\n\r\nexport default class Swimlane extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      clients: this.props.clients,\r\n    };\r\n  }\r\n\r\n  // Update card status when dropped in a new swimlane\r\n  updateCardStatus(cardId, newStatus) {\r\n    const updatedClients = this.state.clients.map(client => {\r\n      if (client.id === cardId) {\r\n        client.status = newStatus;  // Update the card's status based on the new swimlane\r\n      }\r\n      return client;\r\n    });\r\n\r\n    this.setState({ clients: updatedClients });\r\n  }\r\n\r\n  // Initialize drag-and-drop functionality with Dragula\r\n  componentDidMount() {\r\n    const container = this.props.dragulaRef.current;\r\n\r\n    if (container) {\r\n      const drake = Dragula([container]);\r\n\r\n      // Handle when a card is dropped in another swimlane\r\n      drake.on('drop', (el, target) => {\r\n        const cardId = el.dataset.id;\r\n        const newSwimlane = target.dataset.swimlane;  // Target swimlane is in the data attribute\r\n        this.updateCardStatus(cardId, newSwimlane);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const cards = this.state.clients.map(client => (\r\n      <Card\r\n        key={client.id}\r\n        id={client.id}\r\n        name={client.name}\r\n        description={client.description}\r\n        status={client.status}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div className=\"Swimlane-column\" data-swimlane={this.props.name} ref={this.props.dragulaRef}>\r\n        <div className=\"Swimlane-title\">{this.props.name}</div>\r\n        <div className=\"Swimlane-dragColumn\">\r\n          {cards}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;AACvB,OAAOC,OAAO,MAAM,SAAS;AAE7B,eAAe,MAAMC,QAAQ,SAASH,KAAK,CAACI,SAAS,CAAC;EACpDC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACXC,OAAO,EAAE,IAAI,CAACF,KAAK,CAACE;IACtB,CAAC;EACH;;EAEA;EACAC,gBAAgBA,CAACC,MAAM,EAAEC,SAAS,EAAE;IAClC,MAAMC,cAAc,GAAG,IAAI,CAACL,KAAK,CAACC,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;MACtD,IAAIA,MAAM,CAACC,EAAE,KAAKL,MAAM,EAAE;QACxBI,MAAM,CAACE,MAAM,GAAGL,SAAS,CAAC,CAAE;MAC9B;MACA,OAAOG,MAAM;IACf,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAAC;MAAET,OAAO,EAAEI;IAAe,CAAC,CAAC;EAC5C;;EAEA;EACAM,iBAAiBA,CAAA,EAAG;IAClB,MAAMC,SAAS,GAAG,IAAI,CAACb,KAAK,CAACc,UAAU,CAACC,OAAO;IAE/C,IAAIF,SAAS,EAAE;MACb,MAAMG,KAAK,GAAGpB,OAAO,CAAC,CAACiB,SAAS,CAAC,CAAC;;MAElC;MACAG,KAAK,CAACC,EAAE,CAAC,MAAM,EAAE,CAACC,EAAE,EAAEC,MAAM,KAAK;QAC/B,MAAMf,MAAM,GAAGc,EAAE,CAACE,OAAO,CAACX,EAAE;QAC5B,MAAMY,WAAW,GAAGF,MAAM,CAACC,OAAO,CAACE,QAAQ,CAAC,CAAE;QAC9C,IAAI,CAACnB,gBAAgB,CAACC,MAAM,EAAEiB,WAAW,CAAC;MAC5C,CAAC,CAAC;IACJ;EACF;EAEAE,MAAMA,CAAA,EAAG;IACP,MAAMC,KAAK,GAAG,IAAI,CAACvB,KAAK,CAACC,OAAO,CAACK,GAAG,CAACC,MAAM,iBACzCd,KAAA,CAAA+B,aAAA,CAAC9B,IAAI;MACH+B,GAAG,EAAElB,MAAM,CAACC,EAAG;MACfA,EAAE,EAAED,MAAM,CAACC,EAAG;MACdkB,IAAI,EAAEnB,MAAM,CAACmB,IAAK;MAClBC,WAAW,EAAEpB,MAAM,CAACoB,WAAY;MAChClB,MAAM,EAAEF,MAAM,CAACE,MAAO;MAAAmB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACvB,CACF,CAAC;IAEF,oBACExC,KAAA,CAAA+B,aAAA;MAAKU,SAAS,EAAC,iBAAiB;MAAC,iBAAe,IAAI,CAACnC,KAAK,CAAC2B,IAAK;MAACS,GAAG,EAAE,IAAI,CAACpC,KAAK,CAACc,UAAW;MAAAe,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC1FxC,KAAA,CAAA+B,aAAA;MAAKU,SAAS,EAAC,gBAAgB;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAE,IAAI,CAAClC,KAAK,CAAC2B,IAAU,CAAC,eACvDjC,KAAA,CAAA+B,aAAA;MAAKU,SAAS,EAAC,qBAAqB;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACjCV,KACE,CACF,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}