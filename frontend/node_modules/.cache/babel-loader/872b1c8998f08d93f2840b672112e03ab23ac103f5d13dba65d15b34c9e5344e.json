{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator-React-advanced\\\\Shiptivitas\\\\frontend\\\\src\\\\Board.js\";\nimport React from 'react';\nimport 'dragula/dist/dragula.css';\nimport Swimlane from './Swimlane';\nimport './Board.css';\nimport dragula from 'dragula';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.swimlanes = {\n      backlog: /*#__PURE__*/React.createRef(),\n      inProgress: /*#__PURE__*/React.createRef(),\n      complete: /*#__PURE__*/React.createRef()\n    };\n  }\n  componentDidMount() {\n    this.drake = dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current]);\n    this.drake.on('drop', (el, target, source, sibling) => {\n      this.updateCardStatus(el, target, sibling);\n    });\n  }\n  componentWillUnmount() {\n    this.drake.destroy();\n  }\n  async updateCardStatus(el, target, sibling) {\n    var _this$props$clients, _this$props$clients2, _this$props$clients3;\n    const cardId = el.dataset.id;\n    const targetStatus = target.dataset.status;\n\n    // Get all cards from the current state (fallback if `clients` is missing)\n    const allCards = [...(((_this$props$clients = this.props.clients) === null || _this$props$clients === void 0 ? void 0 : _this$props$clients.backlog) || []), ...(((_this$props$clients2 = this.props.clients) === null || _this$props$clients2 === void 0 ? void 0 : _this$props$clients2.inProgress) || []), ...(((_this$props$clients3 = this.props.clients) === null || _this$props$clients3 === void 0 ? void 0 : _this$props$clients3.complete) || [])];\n    const card = allCards.find(c => c.id.toString() === cardId);\n    if (!card) return;\n    const oldStatus = card.status;\n    const oldPriority = card.priority;\n\n    // Find new priority based on sibling\n    const siblingId = sibling ? sibling.dataset.id : null;\n    const targetCards = allCards.filter(c => c.status === targetStatus && c.id !== card.id).sort((a, b) => a.priority - b.priority);\n    const newPriority = siblingId ? targetCards.findIndex(c => c.id.toString() === siblingId) : targetCards.length;\n    try {\n      // Call API to update card status and priority\n      const response = await fetch(`/api/v1/cards/${card.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          newStatus: targetStatus,\n          newPriority,\n          oldStatus,\n          oldPriority,\n          userId: this.props.currentUserId\n        })\n      });\n      if (!response.ok) {\n        console.error('Failed to update card status');\n        return;\n      }\n\n      // After updating, re-fetch the updated list of cards\n      const updatedCards = await response.json();\n\n      // Group updated cards based on status\n      const groupedCards = {\n        backlog: updatedCards.filter(c => c.status === 'backlog'),\n        inProgress: updatedCards.filter(c => c.status === 'in-progress'),\n        complete: updatedCards.filter(c => c.status === 'complete')\n      };\n\n      // Update the state in the parent component (App.js)\n      this.props.updateClients(groupedCards);\n    } catch (error) {\n      console.error('Error updating card:', error);\n    }\n  }\n  getCardStyle(status) {\n    switch (status) {\n      case 'backlog':\n        return {\n          backgroundColor: 'grey'\n        };\n      case 'in-progress':\n        return {\n          backgroundColor: 'blue'\n        };\n      case 'complete':\n        return {\n          backgroundColor: 'green'\n        };\n      default:\n        return {};\n    }\n  }\n  renderSwimlane(name, status, cards, ref) {\n    return /*#__PURE__*/_jsxDEV(Swimlane, {\n      name: name,\n      status: status,\n      clients: cards.map(c => ({\n        ...c,\n        style: this.getCardStyle(c.status)\n      })),\n      dragulaRef: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    // Destructure clients with fallback to empty arrays if undefined\n    const {\n      backlog = [],\n      inProgress = [],\n      complete = []\n    } = this.props.clients || {};\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('In Progress', 'in-progress', inProgress, this.swimlanes.inProgress)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Swimlane","dragula","jsxDEV","_jsxDEV","Board","Component","constructor","props","swimlanes","backlog","createRef","inProgress","complete","componentDidMount","drake","current","on","el","target","source","sibling","updateCardStatus","componentWillUnmount","destroy","_this$props$clients","_this$props$clients2","_this$props$clients3","cardId","dataset","id","targetStatus","status","allCards","clients","card","find","c","toString","oldStatus","oldPriority","priority","siblingId","targetCards","filter","sort","a","b","newPriority","findIndex","length","response","fetch","method","headers","body","JSON","stringify","newStatus","userId","currentUserId","ok","console","error","updatedCards","json","groupedCards","updateClients","getCardStyle","backgroundColor","renderSwimlane","name","cards","ref","map","style","dragulaRef","fileName","_jsxFileName","lineNumber","columnNumber","render","className","children"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator-React-advanced/Shiptivitas/frontend/src/Board.js"],"sourcesContent":["import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n\r\n    this.drake.on('drop', (el, target, source, sibling) => {\r\n      this.updateCardStatus(el, target, sibling);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.drake.destroy();\r\n  }\r\n\r\n  async updateCardStatus(el, target, sibling) {\r\n    const cardId = el.dataset.id;\r\n    const targetStatus = target.dataset.status;\r\n\r\n    // Get all cards from the current state (fallback if `clients` is missing)\r\n    const allCards = [\r\n      ...(this.props.clients?.backlog || []),\r\n      ...(this.props.clients?.inProgress || []),\r\n      ...(this.props.clients?.complete || []),\r\n    ];\r\n    const card = allCards.find(c => c.id.toString() === cardId);\r\n\r\n    if (!card) return;\r\n\r\n    const oldStatus = card.status;\r\n    const oldPriority = card.priority;\r\n\r\n    // Find new priority based on sibling\r\n    const siblingId = sibling ? sibling.dataset.id : null;\r\n    const targetCards = allCards\r\n      .filter(c => c.status === targetStatus && c.id !== card.id)\r\n      .sort((a, b) => a.priority - b.priority);\r\n\r\n    const newPriority = siblingId\r\n      ? targetCards.findIndex(c => c.id.toString() === siblingId)\r\n      : targetCards.length;\r\n\r\n    try {\r\n      // Call API to update card status and priority\r\n      const response = await fetch(`/api/v1/cards/${card.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          newStatus: targetStatus,\r\n          newPriority,\r\n          oldStatus,\r\n          oldPriority,\r\n          userId: this.props.currentUserId,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to update card status');\r\n        return;\r\n      }\r\n\r\n      // After updating, re-fetch the updated list of cards\r\n      const updatedCards = await response.json();\r\n\r\n      // Group updated cards based on status\r\n      const groupedCards = {\r\n        backlog: updatedCards.filter(c => c.status === 'backlog'),\r\n        inProgress: updatedCards.filter(c => c.status === 'in-progress'),\r\n        complete: updatedCards.filter(c => c.status === 'complete'),\r\n      };\r\n\r\n      // Update the state in the parent component (App.js)\r\n      this.props.updateClients(groupedCards);\r\n\r\n    } catch (error) {\r\n      console.error('Error updating card:', error);\r\n    }\r\n  }\r\n\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog':\r\n        return { backgroundColor: 'grey' };\r\n      case 'in-progress':\r\n        return { backgroundColor: 'blue' };\r\n      case 'complete':\r\n        return { backgroundColor: 'green' };\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n\r\n  renderSwimlane(name, status, cards, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        status={status}\r\n        clients={cards.map(c => ({\r\n          ...c,\r\n          style: this.getCardStyle(c.status),\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // Destructure clients with fallback to empty arrays if undefined\r\n    const { backlog = [], inProgress = [], complete = [] } = this.props.clients || {};\r\n\r\n    return (\r\n      <div className=\"Board container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('In Progress', 'in-progress', inProgress, this.swimlanes.inProgress)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}