{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator\\\\Shiptivity\\\\src\\\\Board.js\";\nimport React from 'react';\nimport Dragula from 'dragula';\nimport 'dragula/dist/dragula.css';\nimport Swimlane from './Swimlane';\nimport './Board.css';\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    const clients = this.getClients();\n    this.state = {\n      clients: {\n        backlog: clients.filter(client => client.status === 'backlog'),\n        inProgress: clients.filter(client => client.status === 'in-progress'),\n        complete: clients.filter(client => client.status === 'complete')\n      }\n    };\n    this.swimlanes = {\n      backlog: /*#__PURE__*/React.createRef(),\n      inProgress: /*#__PURE__*/React.createRef(),\n      complete: /*#__PURE__*/React.createRef()\n    };\n  }\n\n  // Function to get the initial set of clients\n  getClients() {\n    return [['1', 'Stark, White and Abbott', 'Cloned Optimal Architecture', 'in-progress'], ['2', 'Wiza LLC', 'Exclusive Bandwidth-Monitored Implementation', 'complete'], ['3', 'Nolan LLC', 'Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'], ['4', 'Thompson PLC', 'Streamlined Regional Knowledgeuser', 'in-progress'], ['5', 'Walker-Williamson', 'Team-Oriented 6Thgeneration Matrix', 'in-progress'], ['6', 'Boehm and Sons', 'Automated Systematic Paradigm', 'backlog'], ['7', 'Runolfsson, Hegmann and Block', 'Integrated Transitional Strategy', 'backlog'], ['8', 'Schumm-Labadie', 'Operative Heuristic Challenge', 'backlog'], ['9', 'Kohler Group', 'Re-Contextualized Multi-Tasking Attitude', 'backlog'], ['10', 'Romaguera Inc', 'Managed Foreground Toolset', 'backlog'], ['11', 'Reilly-King', 'Future-Proofed Interactive Toolset', 'complete'], ['12', 'Emard, Champlin and Runolfsdottir', 'Devolved Needs-Based Capability', 'backlog'], ['13', 'Fritsch, Cronin and Wolff', 'Open-Source 3Rdgeneration Website', 'complete'], ['14', 'Borer LLC', 'Profit-Focused Incremental Orchestration', 'backlog'], ['15', 'Emmerich-Ankunding', 'User-Centric Stable Extranet', 'in-progress'], ['16', 'Willms-Abbott', 'Progressive Bandwidth-Monitored Access', 'in-progress'], ['17', 'Brekke PLC', 'Intuitive User-Facing Customerloyalty', 'complete'], ['18', 'Bins, Toy and Klocko', 'Integrated Assymetric Software', 'backlog'], ['19', 'Hodkiewicz-Hayes', 'Programmable Systematic Securedline', 'backlog'], ['20', 'Murphy, Lang and Ferry', 'Organized Explicit Access', 'backlog']].map(companyDetails => ({\n      id: companyDetails[0],\n      name: companyDetails[1],\n      description: companyDetails[2],\n      status: companyDetails[3]\n    }));\n  }\n\n  // Function to update the card's status when dropped into a new swimlane\n  updateCardStatus(cardId, newStatus) {\n    const updatedClients = {\n      ...this.state.clients\n    };\n    Object.keys(updatedClients).forEach(swimlane => {\n      const clientsInSwimlane = updatedClients[swimlane];\n      clientsInSwimlane.forEach(client => {\n        if (client.id === cardId) {\n          client.status = newStatus;\n        }\n      });\n    });\n    this.setState({\n      clients: updatedClients\n    });\n  }\n\n  // Initialize Dragula and handle drop events\n  initializeDragula() {\n    Object.keys(this.swimlanes).forEach(swimlane => {\n      const container = this.swimlanes[swimlane].current;\n      if (container) {\n        const drake = Dragula([container]);\n\n        // On drop, update the status based on the new swimlane\n        drake.on('drop', (el, target) => {\n          const cardId = el.dataset.id;\n          const newSwimlane = target.dataset.swimlane;\n          this.updateCardStatus(cardId, newSwimlane);\n        });\n      }\n    });\n  }\n  componentDidMount() {\n    this.initializeDragula();\n  }\n\n  // Render the swimlanes with the clients (cards)\n  renderSwimlane(name, clients, ref) {\n    return /*#__PURE__*/React.createElement(Swimlane, {\n      name: name,\n      clients: clients,\n      dragulaRef: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)))));\n  }\n}","map":{"version":3,"names":["React","Dragula","Swimlane","Board","Component","constructor","props","clients","getClients","state","backlog","filter","client","status","inProgress","complete","swimlanes","createRef","map","companyDetails","id","name","description","updateCardStatus","cardId","newStatus","updatedClients","Object","keys","forEach","swimlane","clientsInSwimlane","setState","initializeDragula","container","current","drake","on","el","target","dataset","newSwimlane","componentDidMount","renderSwimlane","ref","createElement","dragulaRef","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","render","className"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Board.js"],"sourcesContent":["import React from 'react';\r\nimport Dragula from 'dragula';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      },\r\n    };\r\n\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  // Function to get the initial set of clients\r\n  getClients() {\r\n    return [\r\n      ['1', 'Stark, White and Abbott', 'Cloned Optimal Architecture', 'in-progress'],\r\n      ['2', 'Wiza LLC', 'Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3', 'Nolan LLC', 'Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4', 'Thompson PLC', 'Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5', 'Walker-Williamson', 'Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6', 'Boehm and Sons', 'Automated Systematic Paradigm', 'backlog'],\r\n      ['7', 'Runolfsson, Hegmann and Block', 'Integrated Transitional Strategy', 'backlog'],\r\n      ['8', 'Schumm-Labadie', 'Operative Heuristic Challenge', 'backlog'],\r\n      ['9', 'Kohler Group', 'Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10', 'Romaguera Inc', 'Managed Foreground Toolset', 'backlog'],\r\n      ['11', 'Reilly-King', 'Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12', 'Emard, Champlin and Runolfsdottir', 'Devolved Needs-Based Capability', 'backlog'],\r\n      ['13', 'Fritsch, Cronin and Wolff', 'Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14', 'Borer LLC', 'Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15', 'Emmerich-Ankunding', 'User-Centric Stable Extranet', 'in-progress'],\r\n      ['16', 'Willms-Abbott', 'Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17', 'Brekke PLC', 'Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18', 'Bins, Toy and Klocko', 'Integrated Assymetric Software', 'backlog'],\r\n      ['19', 'Hodkiewicz-Hayes', 'Programmable Systematic Securedline', 'backlog'],\r\n      ['20', 'Murphy, Lang and Ferry', 'Organized Explicit Access', 'backlog'],\r\n    ].map(companyDetails => ({\r\n      id: companyDetails[0],\r\n      name: companyDetails[1],\r\n      description: companyDetails[2],\r\n      status: companyDetails[3],\r\n    }));\r\n  }\r\n\r\n  // Function to update the card's status when dropped into a new swimlane\r\n  updateCardStatus(cardId, newStatus) {\r\n    const updatedClients = { ...this.state.clients };\r\n    Object.keys(updatedClients).forEach(swimlane => {\r\n      const clientsInSwimlane = updatedClients[swimlane];\r\n      clientsInSwimlane.forEach(client => {\r\n        if (client.id === cardId) {\r\n          client.status = newStatus;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ clients: updatedClients });\r\n  }\r\n\r\n  // Initialize Dragula and handle drop events\r\n  initializeDragula() {\r\n    Object.keys(this.swimlanes).forEach(swimlane => {\r\n      const container = this.swimlanes[swimlane].current;\r\n\r\n      if (container) {\r\n        const drake = Dragula([container]);\r\n\r\n        // On drop, update the status based on the new swimlane\r\n        drake.on('drop', (el, target) => {\r\n          const cardId = el.dataset.id;\r\n          const newSwimlane = target.dataset.swimlane;\r\n          this.updateCardStatus(cardId, newSwimlane);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initializeDragula();\r\n  }\r\n\r\n  // Render the swimlanes with the clients (cards)\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAO,0BAA0B;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,aAAa;AAEpB,eAAe,MAAMC,KAAK,SAASH,KAAK,CAACI,SAAS,CAAC;EACjDC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IACjC,IAAI,CAACC,KAAK,GAAG;MACXF,OAAO,EAAE;QACPG,OAAO,EAAEH,OAAO,CAACI,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,SAAS,CAAC;QAC9DC,UAAU,EAAEP,OAAO,CAACI,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,aAAa,CAAC;QACrEE,QAAQ,EAAER,OAAO,CAACI,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,UAAU;MACjE;IACF,CAAC;IAED,IAAI,CAACG,SAAS,GAAG;MACfN,OAAO,eAAEV,KAAK,CAACiB,SAAS,CAAC,CAAC;MAC1BH,UAAU,eAAEd,KAAK,CAACiB,SAAS,CAAC,CAAC;MAC7BF,QAAQ,eAAEf,KAAK,CAACiB,SAAS,CAAC;IAC5B,CAAC;EACH;;EAEA;EACAT,UAAUA,CAAA,EAAG;IACX,OAAO,CACL,CAAC,GAAG,EAAE,yBAAyB,EAAE,6BAA6B,EAAE,aAAa,CAAC,EAC9E,CAAC,GAAG,EAAE,UAAU,EAAE,8CAA8C,EAAE,UAAU,CAAC,EAC7E,CAAC,GAAG,EAAE,WAAW,EAAE,sDAAsD,EAAE,SAAS,CAAC,EACrF,CAAC,GAAG,EAAE,cAAc,EAAE,oCAAoC,EAAE,aAAa,CAAC,EAC1E,CAAC,GAAG,EAAE,mBAAmB,EAAE,oCAAoC,EAAE,aAAa,CAAC,EAC/E,CAAC,GAAG,EAAE,gBAAgB,EAAE,+BAA+B,EAAE,SAAS,CAAC,EACnE,CAAC,GAAG,EAAE,+BAA+B,EAAE,kCAAkC,EAAE,SAAS,CAAC,EACrF,CAAC,GAAG,EAAE,gBAAgB,EAAE,+BAA+B,EAAE,SAAS,CAAC,EACnE,CAAC,GAAG,EAAE,cAAc,EAAE,0CAA0C,EAAE,SAAS,CAAC,EAC5E,CAAC,IAAI,EAAE,eAAe,EAAE,4BAA4B,EAAE,SAAS,CAAC,EAChE,CAAC,IAAI,EAAE,aAAa,EAAE,oCAAoC,EAAE,UAAU,CAAC,EACvE,CAAC,IAAI,EAAE,mCAAmC,EAAE,iCAAiC,EAAE,SAAS,CAAC,EACzF,CAAC,IAAI,EAAE,2BAA2B,EAAE,mCAAmC,EAAE,UAAU,CAAC,EACpF,CAAC,IAAI,EAAE,WAAW,EAAE,0CAA0C,EAAE,SAAS,CAAC,EAC1E,CAAC,IAAI,EAAE,oBAAoB,EAAE,8BAA8B,EAAE,aAAa,CAAC,EAC3E,CAAC,IAAI,EAAE,eAAe,EAAE,wCAAwC,EAAE,aAAa,CAAC,EAChF,CAAC,IAAI,EAAE,YAAY,EAAE,uCAAuC,EAAE,UAAU,CAAC,EACzE,CAAC,IAAI,EAAE,sBAAsB,EAAE,gCAAgC,EAAE,SAAS,CAAC,EAC3E,CAAC,IAAI,EAAE,kBAAkB,EAAE,qCAAqC,EAAE,SAAS,CAAC,EAC5E,CAAC,IAAI,EAAE,wBAAwB,EAAE,2BAA2B,EAAE,SAAS,CAAC,CACzE,CAACU,GAAG,CAACC,cAAc,KAAK;MACvBC,EAAE,EAAED,cAAc,CAAC,CAAC,CAAC;MACrBE,IAAI,EAAEF,cAAc,CAAC,CAAC,CAAC;MACvBG,WAAW,EAAEH,cAAc,CAAC,CAAC,CAAC;MAC9BN,MAAM,EAAEM,cAAc,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;EACL;;EAEA;EACAI,gBAAgBA,CAACC,MAAM,EAAEC,SAAS,EAAE;IAClC,MAAMC,cAAc,GAAG;MAAE,GAAG,IAAI,CAACjB,KAAK,CAACF;IAAQ,CAAC;IAChDoB,MAAM,CAACC,IAAI,CAACF,cAAc,CAAC,CAACG,OAAO,CAACC,QAAQ,IAAI;MAC9C,MAAMC,iBAAiB,GAAGL,cAAc,CAACI,QAAQ,CAAC;MAClDC,iBAAiB,CAACF,OAAO,CAACjB,MAAM,IAAI;QAClC,IAAIA,MAAM,CAACQ,EAAE,KAAKI,MAAM,EAAE;UACxBZ,MAAM,CAACC,MAAM,GAAGY,SAAS;QAC3B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACO,QAAQ,CAAC;MAAEzB,OAAO,EAAEmB;IAAe,CAAC,CAAC;EAC5C;;EAEA;EACAO,iBAAiBA,CAAA,EAAG;IAClBN,MAAM,CAACC,IAAI,CAAC,IAAI,CAACZ,SAAS,CAAC,CAACa,OAAO,CAACC,QAAQ,IAAI;MAC9C,MAAMI,SAAS,GAAG,IAAI,CAAClB,SAAS,CAACc,QAAQ,CAAC,CAACK,OAAO;MAElD,IAAID,SAAS,EAAE;QACb,MAAME,KAAK,GAAGnC,OAAO,CAAC,CAACiC,SAAS,CAAC,CAAC;;QAElC;QACAE,KAAK,CAACC,EAAE,CAAC,MAAM,EAAE,CAACC,EAAE,EAAEC,MAAM,KAAK;UAC/B,MAAMf,MAAM,GAAGc,EAAE,CAACE,OAAO,CAACpB,EAAE;UAC5B,MAAMqB,WAAW,GAAGF,MAAM,CAACC,OAAO,CAACV,QAAQ;UAC3C,IAAI,CAACP,gBAAgB,CAACC,MAAM,EAAEiB,WAAW,CAAC;QAC5C,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EAEAC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACT,iBAAiB,CAAC,CAAC;EAC1B;;EAEA;EACAU,cAAcA,CAACtB,IAAI,EAAEd,OAAO,EAAEqC,GAAG,EAAE;IACjC,oBACE5C,KAAA,CAAA6C,aAAA,CAAC3C,QAAQ;MACPmB,IAAI,EAAEA,IAAK;MACXd,OAAO,EAAEA,OAAQ;MACjBuC,UAAU,EAAEF,GAAI;MAAAG,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACjB,CAAC;EAEN;EAEAC,MAAMA,CAAA,EAAG;IACP,oBACErD,KAAA,CAAA6C,aAAA;MAAKS,SAAS,EAAC,OAAO;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACpBpD,KAAA,CAAA6C,aAAA;MAAKS,SAAS,EAAC,iBAAiB;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC9BpD,KAAA,CAAA6C,aAAA;MAAKS,SAAS,EAAC,KAAK;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAClBpD,KAAA,CAAA6C,aAAA;MAAKS,SAAS,EAAC,UAAU;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACtB,IAAI,CAACT,cAAc,CAAC,SAAS,EAAE,IAAI,CAAClC,KAAK,CAACF,OAAO,CAACG,OAAO,EAAE,IAAI,CAACM,SAAS,CAACN,OAAO,CAC/E,CAAC,eACNV,KAAA,CAAA6C,aAAA;MAAKS,SAAS,EAAC,UAAU;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACtB,IAAI,CAACT,cAAc,CAAC,aAAa,EAAE,IAAI,CAAClC,KAAK,CAACF,OAAO,CAACO,UAAU,EAAE,IAAI,CAACE,SAAS,CAACF,UAAU,CACzF,CAAC,eACNd,KAAA,CAAA6C,aAAA;MAAKS,SAAS,EAAC,UAAU;MAAAP,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACtB,IAAI,CAACT,cAAc,CAAC,UAAU,EAAE,IAAI,CAAClC,KAAK,CAACF,OAAO,CAACQ,QAAQ,EAAE,IAAI,CAACC,SAAS,CAACD,QAAQ,CAClF,CACF,CACF,CACF,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}