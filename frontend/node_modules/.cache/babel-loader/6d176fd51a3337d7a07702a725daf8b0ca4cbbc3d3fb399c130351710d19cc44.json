{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator-React-advanced\\\\Shiptivitas\\\\frontend\\\\src\\\\Board.js\";\nimport React, { Component } from 'react';\nimport 'dragula/dist/dragula.css';\nimport Swimlane from './Swimlane';\nimport './Board.css';\nimport dragula from 'dragula';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: this.props.clients || {\n        backlog: [],\n        'in-progress': [],\n        complete: []\n      }\n    };\n    this.swimlanes = {\n      backlog: /*#__PURE__*/React.createRef(),\n      'in-progress': /*#__PURE__*/React.createRef(),\n      complete: /*#__PURE__*/React.createRef()\n    };\n  }\n  componentDidMount() {\n    this.drake = dragula([this.swimlanes.backlog.current, this.swimlanes['in-progress'].current, this.swimlanes.complete.current]);\n    this.drake.on('drop', (el, target, source, sibling) => {\n      this.updateCardStatus(el, target, sibling);\n    });\n  }\n  componentWillUnmount() {\n    if (this.drake) {\n      this.drake.destroy();\n    }\n  }\n  async updateCardStatus(el, target, sibling) {\n    const cardId = el.dataset.id;\n    const targetStatus = target.dataset.status;\n    const allCards = [...this.state.cards.backlog, ...this.state.cards['in-progress'], ...this.state.cards.complete];\n    const card = allCards.find(c => c.id.toString() === cardId);\n    if (!card) return;\n    const oldStatus = card.status;\n    const oldPriority = card.priority;\n    const siblingId = sibling ? sibling.dataset.id : null;\n    const targetCards = allCards.filter(c => c.status === targetStatus && c.id !== card.id).sort((a, b) => a.priority - b.priority);\n    const newPriority = siblingId ? (() => {\n      const index = targetCards.findIndex(c => c.id.toString() === siblingId);\n      return index !== -1 ? index : targetCards.length;\n    })() : targetCards.length;\n    try {\n      const response = await fetch(`/api/v1/cards/${card.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          newStatus: targetStatus,\n          newPriority,\n          oldStatus,\n          oldPriority,\n          userId: this.props.currentUserId\n        })\n      });\n      if (!response.ok) {\n        console.error('Failed to update card status');\n        return;\n      }\n      const updatedCards = await response.json();\n      this.setState({\n        cards: this.updateCardsState(updatedCards)\n      });\n    } catch (error) {\n      console.error('Error updating card:', error);\n    }\n  }\n  updateCardsState(updatedCards) {\n    const newCards = {\n      backlog: [],\n      'in-progress': [],\n      complete: []\n    };\n    updatedCards.forEach(card => {\n      if (['backlog', 'in-progress', 'complete'].includes(card.status)) {\n        newCards[card.status].push(card);\n      } else {\n        console.warn(`Unexpected status: ${card.status}, skipping card.`);\n      }\n    });\n    return newCards;\n  }\n  getCardStyle(status) {\n    switch (status) {\n      case 'backlog':\n        return {\n          backgroundColor: 'grey'\n        };\n      case 'in-progress':\n        return {\n          backgroundColor: 'blue'\n        };\n      case 'complete':\n        return {\n          backgroundColor: 'green'\n        };\n      default:\n        return {};\n    }\n  }\n  renderSwimlane(name, status, cards, ref) {\n    return /*#__PURE__*/_jsxDEV(Swimlane, {\n      name: name,\n      status: status,\n      clients: cards.map(c => ({\n        ...c,\n        style: this.getCardStyle(c.status)\n      })),\n      dragulaRef: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    const {\n      backlog = [],\n      'in-progress': inProgressCards = [],\n      complete = []\n    } = this.state.cards;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('In Progress', 'in-progress', inProgressCards, this.swimlanes['in-progress'])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }, this);\n  }\n}\n\n/* import React, { Component } from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: this.props.clients || { backlog: [], inProgress: [], complete: [] },\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n\r\n    this.drake.on('drop', (el, target, source, sibling) => {\r\n      console.log('Card dropped:', el.dataset.id, target.dataset.status); // Debugging\r\n      this.updateCardStatus(el, target, sibling);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.drake) {\r\n      this.drake.destroy();\r\n    }\r\n  }\r\n\r\n  // Update card status and priority after drag\r\n  async updateCardStatus(el, target, sibling) {\r\n    const cardId = el.dataset.id;\r\n    const targetStatus = target.dataset.status;\r\n\r\n    // Fetch all cards and find the dragged card\r\n    const allCards = [\r\n      ...(this.state.cards.backlog || []),\r\n      ...(this.state.cards.inProgress || []),\r\n      ...(this.state.cards.complete || []),\r\n    ];\r\n    const card = allCards.find(c => c.id.toString() === cardId);\r\n\r\n    if (!card) return;\r\n\r\n    const oldStatus = card.status;\r\n    const oldPriority = card.priority;\r\n\r\n    // Find the new priority based on the sibling card's position\r\n    const siblingId = sibling ? sibling.dataset.id : null;\r\n    const targetCards = allCards\r\n      .filter(c => c.status === targetStatus && c.id !== card.id)\r\n      .sort((a, b) => a.priority - b.priority);\r\n\r\n    const newPriority = siblingId\r\n      ? targetCards.findIndex(c => c.id.toString() === siblingId)\r\n      : targetCards.length;\r\n\r\n    try {\r\n      console.log(`Updating card status for card ID: ${cardId}, from ${oldStatus} to ${targetStatus}`);\r\n\r\n      // Update the card status and priority via API\r\n      const response = await fetch(`/api/v1/cards/${card.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          newStatus: targetStatus,\r\n          newPriority,\r\n          oldStatus,\r\n          oldPriority,\r\n          userId: this.props.currentUserId,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to update card status');\r\n        return;\r\n      }\r\n\r\n      const updatedCards = await response.json();\r\n\r\n      // Update the state with the updated cards\r\n      this.setState({ cards: this.updateCardsState(updatedCards) });\r\n      console.log('Card status updated:', updatedCards);\r\n\r\n    } catch (error) {\r\n      console.error('Error updating card:', error);\r\n    }\r\n  }\r\n\r\n  // Helper function to update cards state\r\n  updateCardsState(updatedCards) {\r\n    const newCards = {\r\n      backlog: [],\r\n      inProgress: [],\r\n      complete: [],\r\n    };\r\n\r\n    updatedCards.forEach(card => {\r\n      // Ensure the status is a valid category before attempting to push\r\n      if (['backlog', 'in-progress', 'complete'].includes(card.status)) {\r\n        newCards[card.status].push(card);\r\n      } else {\r\n        // Log unexpected statuses and handle them gracefully\r\n        console.warn(`Unexpected status: ${card.status}, skipping card.`);\r\n      }\r\n    });\r\n\r\n    return newCards;\r\n  }\r\n\r\n  // Determine the card style based on its status\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog': return { backgroundColor: 'grey' };\r\n      case 'in-progress': return { backgroundColor: 'blue' };\r\n      case 'complete': return { backgroundColor: 'green' };\r\n      default: return {};\r\n    }\r\n  }\r\n\r\n  // Render a Swimlane component for each status category\r\n  renderSwimlane(name, status, cards, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        status={status}\r\n        clients={cards.map(c => ({\r\n          ...c,\r\n          style: this.getCardStyle(c.status), // Recalculate style after status change\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { backlog = [], inProgress = [], complete = [] } = this.state.cards;\r\n\r\n    return (\r\n      <div className=\"Board container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('In Progress', 'in-progress', inProgress, this.swimlanes.inProgress)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/","map":{"version":3,"names":["React","Component","Swimlane","dragula","jsxDEV","_jsxDEV","Board","constructor","props","state","cards","clients","backlog","complete","swimlanes","createRef","componentDidMount","drake","current","on","el","target","source","sibling","updateCardStatus","componentWillUnmount","destroy","cardId","dataset","id","targetStatus","status","allCards","card","find","c","toString","oldStatus","oldPriority","priority","siblingId","targetCards","filter","sort","a","b","newPriority","index","findIndex","length","response","fetch","method","headers","body","JSON","stringify","newStatus","userId","currentUserId","ok","console","error","updatedCards","json","setState","updateCardsState","newCards","forEach","includes","push","warn","getCardStyle","backgroundColor","renderSwimlane","name","ref","map","style","dragulaRef","fileName","_jsxFileName","lineNumber","columnNumber","render","inProgressCards","className","children"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator-React-advanced/Shiptivitas/frontend/src/Board.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: this.props.clients || { backlog: [], 'in-progress': [], complete: [] },\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      'in-progress': React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes['in-progress'].current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n\r\n    this.drake.on('drop', (el, target, source, sibling) => {\r\n      this.updateCardStatus(el, target, sibling);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.drake) {\r\n      this.drake.destroy();\r\n    }\r\n  }\r\n\r\n  async updateCardStatus(el, target, sibling) {\r\n    const cardId = el.dataset.id;\r\n    const targetStatus = target.dataset.status;\r\n\r\n    const allCards = [\r\n      ...this.state.cards.backlog,\r\n      ...this.state.cards['in-progress'],\r\n      ...this.state.cards.complete,\r\n    ];\r\n\r\n    const card = allCards.find(c => c.id.toString() === cardId);\r\n    if (!card) return;\r\n\r\n    const oldStatus = card.status;\r\n    const oldPriority = card.priority;\r\n\r\n    const siblingId = sibling ? sibling.dataset.id : null;\r\n    const targetCards = allCards\r\n      .filter(c => c.status === targetStatus && c.id !== card.id)\r\n      .sort((a, b) => a.priority - b.priority);\r\n\r\n    const newPriority = siblingId\r\n      ? (() => {\r\n          const index = targetCards.findIndex(c => c.id.toString() === siblingId);\r\n          return index !== -1 ? index : targetCards.length;\r\n        })()\r\n      : targetCards.length;\r\n\r\n    try {\r\n      const response = await fetch(`/api/v1/cards/${card.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          newStatus: targetStatus,\r\n          newPriority,\r\n          oldStatus,\r\n          oldPriority,\r\n          userId: this.props.currentUserId,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to update card status');\r\n        return;\r\n      }\r\n\r\n      const updatedCards = await response.json();\r\n      this.setState({ cards: this.updateCardsState(updatedCards) });\r\n    } catch (error) {\r\n      console.error('Error updating card:', error);\r\n    }\r\n  }\r\n\r\n  updateCardsState(updatedCards) {\r\n    const newCards = {\r\n      backlog: [],\r\n      'in-progress': [],\r\n      complete: [],\r\n    };\r\n\r\n    updatedCards.forEach(card => {\r\n      if (['backlog', 'in-progress', 'complete'].includes(card.status)) {\r\n        newCards[card.status].push(card);\r\n      } else {\r\n        console.warn(`Unexpected status: ${card.status}, skipping card.`);\r\n      }\r\n    });\r\n\r\n    return newCards;\r\n  }\r\n\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog': return { backgroundColor: 'grey' };\r\n      case 'in-progress': return { backgroundColor: 'blue' };\r\n      case 'complete': return { backgroundColor: 'green' };\r\n      default: return {};\r\n    }\r\n  }\r\n\r\n  renderSwimlane(name, status, cards, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        status={status}\r\n        clients={cards.map(c => ({\r\n          ...c,\r\n          style: this.getCardStyle(c.status),\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n  const { backlog = [], 'in-progress': inProgressCards = [], complete = [] } = this.state.cards;\r\n\r\n  return (\r\n    <div className=\"Board container-fluid\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          {this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)}\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          {this.renderSwimlane('In Progress', 'in-progress', inProgressCards, this.swimlanes['in-progress'])}\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          {this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n/* import React, { Component } from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: this.props.clients || { backlog: [], inProgress: [], complete: [] },\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n\r\n    this.drake.on('drop', (el, target, source, sibling) => {\r\n      console.log('Card dropped:', el.dataset.id, target.dataset.status); // Debugging\r\n      this.updateCardStatus(el, target, sibling);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.drake) {\r\n      this.drake.destroy();\r\n    }\r\n  }\r\n\r\n  // Update card status and priority after drag\r\n  async updateCardStatus(el, target, sibling) {\r\n    const cardId = el.dataset.id;\r\n    const targetStatus = target.dataset.status;\r\n\r\n    // Fetch all cards and find the dragged card\r\n    const allCards = [\r\n      ...(this.state.cards.backlog || []),\r\n      ...(this.state.cards.inProgress || []),\r\n      ...(this.state.cards.complete || []),\r\n    ];\r\n    const card = allCards.find(c => c.id.toString() === cardId);\r\n\r\n    if (!card) return;\r\n\r\n    const oldStatus = card.status;\r\n    const oldPriority = card.priority;\r\n\r\n    // Find the new priority based on the sibling card's position\r\n    const siblingId = sibling ? sibling.dataset.id : null;\r\n    const targetCards = allCards\r\n      .filter(c => c.status === targetStatus && c.id !== card.id)\r\n      .sort((a, b) => a.priority - b.priority);\r\n\r\n    const newPriority = siblingId\r\n      ? targetCards.findIndex(c => c.id.toString() === siblingId)\r\n      : targetCards.length;\r\n\r\n    try {\r\n      console.log(`Updating card status for card ID: ${cardId}, from ${oldStatus} to ${targetStatus}`);\r\n\r\n      // Update the card status and priority via API\r\n      const response = await fetch(`/api/v1/cards/${card.id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          newStatus: targetStatus,\r\n          newPriority,\r\n          oldStatus,\r\n          oldPriority,\r\n          userId: this.props.currentUserId,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Failed to update card status');\r\n        return;\r\n      }\r\n\r\n      const updatedCards = await response.json();\r\n\r\n      // Update the state with the updated cards\r\n      this.setState({ cards: this.updateCardsState(updatedCards) });\r\n      console.log('Card status updated:', updatedCards);\r\n\r\n    } catch (error) {\r\n      console.error('Error updating card:', error);\r\n    }\r\n  }\r\n\r\n  // Helper function to update cards state\r\n  updateCardsState(updatedCards) {\r\n    const newCards = {\r\n      backlog: [],\r\n      inProgress: [],\r\n      complete: [],\r\n    };\r\n\r\n    updatedCards.forEach(card => {\r\n      // Ensure the status is a valid category before attempting to push\r\n      if (['backlog', 'in-progress', 'complete'].includes(card.status)) {\r\n        newCards[card.status].push(card);\r\n      } else {\r\n        // Log unexpected statuses and handle them gracefully\r\n        console.warn(`Unexpected status: ${card.status}, skipping card.`);\r\n      }\r\n    });\r\n\r\n    return newCards;\r\n  }\r\n\r\n  // Determine the card style based on its status\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog': return { backgroundColor: 'grey' };\r\n      case 'in-progress': return { backgroundColor: 'blue' };\r\n      case 'complete': return { backgroundColor: 'green' };\r\n      default: return {};\r\n    }\r\n  }\r\n\r\n  // Render a Swimlane component for each status category\r\n  renderSwimlane(name, status, cards, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        status={status}\r\n        clients={cards.map(c => ({\r\n          ...c,\r\n          style: this.getCardStyle(c.status), // Recalculate style after status change\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { backlog = [], inProgress = [], complete = [] } = this.state.cards;\r\n\r\n    return (\r\n      <div className=\"Board container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('In Progress', 'in-progress', inProgress, this.swimlanes.inProgress)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/"],"mappings":"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YAAA;IAAA,OACH,CAAC;EAEV;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}