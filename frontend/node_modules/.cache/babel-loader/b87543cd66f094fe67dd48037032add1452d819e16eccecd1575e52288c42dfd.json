{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91848\\\\Desktop\\\\cloudsecdoc\\\\interviewPrep\\\\Simulations\\\\YCombinator-React-advanced\\\\Shiptivitas\\\\frontend\\\\src\\\\Board.js\";\nimport React from 'react';\nimport 'dragula/dist/dragula.css';\nimport Swimlane from './Swimlane';\nimport './Board.css';\nimport dragula from 'dragula';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateCardStatus = (el, target, sibling) => {\n      const cardId = el.dataset.id;\n      const targetStatus = target.dataset.status;\n\n      // Get the current status of cards from props\n      const {\n        backlog = [],\n        inProgress = [],\n        complete = []\n      } = this.props;\n      const allCards = [...backlog, ...inProgress, ...complete];\n      const card = allCards.find(c => c.id.toString() === cardId);\n      if (!card) return;\n      const oldStatus = card.status;\n      const oldPriority = card.priority;\n\n      // Find new priority based on sibling\n      const siblingId = sibling ? sibling.dataset.id : null;\n      const targetCards = allCards.filter(c => c.status === targetStatus && c.id !== card.id).sort((a, b) => a.priority - b.priority);\n      const newPriority = siblingId ? targetCards.findIndex(c => c.id.toString() === siblingId) : targetCards.length;\n\n      // Update the card data locally (no API call)\n      this.props.updateCardsStatus(cardId, targetStatus, newPriority, oldStatus, oldPriority);\n    };\n    this.swimlanes = {\n      backlog: /*#__PURE__*/React.createRef(),\n      inProgress: /*#__PURE__*/React.createRef(),\n      complete: /*#__PURE__*/React.createRef()\n    };\n  }\n  componentDidMount() {\n    this.drake = dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current]);\n    this.drake.on('drop', (el, target, source, sibling) => {\n      this.updateCardStatus(el, target, sibling);\n    });\n  }\n  componentWillUnmount() {\n    this.drake.destroy();\n  }\n  getCardStyle(status) {\n    switch (status) {\n      case 'backlog':\n        return {\n          backgroundColor: 'grey'\n        };\n      case 'in-progress':\n        return {\n          backgroundColor: 'blue'\n        };\n      case 'complete':\n        return {\n          backgroundColor: 'green'\n        };\n      default:\n        return {};\n    }\n  }\n  renderSwimlane(name, status, cards, ref) {\n    return /*#__PURE__*/_jsxDEV(Swimlane, {\n      name: name,\n      status: status,\n      clients: cards.map(c => ({\n        ...c,\n        style: this.getCardStyle(c.status)\n      })),\n      dragulaRef: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    // Destructure clients with fallback empty arrays\n    const {\n      backlog = [],\n      inProgress = [],\n      complete = []\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('In Progress', 'in-progress', inProgress, this.swimlanes.inProgress)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Swimlane","dragula","jsxDEV","_jsxDEV","Board","Component","constructor","props","updateCardStatus","el","target","sibling","cardId","dataset","id","targetStatus","status","backlog","inProgress","complete","allCards","card","find","c","toString","oldStatus","oldPriority","priority","siblingId","targetCards","filter","sort","a","b","newPriority","findIndex","length","updateCardsStatus","swimlanes","createRef","componentDidMount","drake","current","on","source","componentWillUnmount","destroy","getCardStyle","backgroundColor","renderSwimlane","name","cards","ref","clients","map","style","dragulaRef","fileName","_jsxFileName","lineNumber","columnNumber","render","className","children"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator-React-advanced/Shiptivitas/frontend/src/Board.js"],"sourcesContent":["import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n\r\n    this.drake.on('drop', (el, target, source, sibling) => {\r\n      this.updateCardStatus(el, target, sibling);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.drake.destroy();\r\n  }\r\n\r\n  updateCardStatus = (el, target, sibling) => {\r\n    const cardId = el.dataset.id;\r\n    const targetStatus = target.dataset.status;\r\n\r\n    // Get the current status of cards from props\r\n    const { backlog = [], inProgress = [], complete = [] } = this.props;\r\n\r\n    const allCards = [...backlog, ...inProgress, ...complete];\r\n    const card = allCards.find(c => c.id.toString() === cardId);\r\n\r\n    if (!card) return;\r\n\r\n    const oldStatus = card.status;\r\n    const oldPriority = card.priority;\r\n\r\n    // Find new priority based on sibling\r\n    const siblingId = sibling ? sibling.dataset.id : null;\r\n    const targetCards = allCards\r\n      .filter(c => c.status === targetStatus && c.id !== card.id)\r\n      .sort((a, b) => a.priority - b.priority);\r\n\r\n    const newPriority = siblingId\r\n      ? targetCards.findIndex(c => c.id.toString() === siblingId)\r\n      : targetCards.length;\r\n\r\n    // Update the card data locally (no API call)\r\n    this.props.updateCardsStatus(\r\n      cardId, \r\n      targetStatus, \r\n      newPriority, \r\n      oldStatus, \r\n      oldPriority\r\n    );\r\n  };\r\n\r\n  getCardStyle(status) {\r\n    switch (status) {\r\n      case 'backlog': return { backgroundColor: 'grey' };\r\n      case 'in-progress': return { backgroundColor: 'blue' };\r\n      case 'complete': return { backgroundColor: 'green' };\r\n      default: return {};\r\n    }\r\n  }\r\n\r\n  renderSwimlane(name, status, cards, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        status={status}\r\n        clients={cards.map(c => ({\r\n          ...c,\r\n          style: this.getCardStyle(c.status),\r\n        }))}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // Destructure clients with fallback empty arrays\r\n    const { backlog = [], inProgress = [], complete = [] } = this.props;\r\n\r\n    return (\r\n      <div className=\"Board container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Backlog', 'backlog', backlog, this.swimlanes.backlog)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('In Progress', 'in-progress', inProgress, this.swimlanes.inProgress)}\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            {this.renderSwimlane('Complete', 'complete', complete, this.swimlanes.complete)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}