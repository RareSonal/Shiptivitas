{"ast":null,"code":"/* import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      }\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  getClients() {\r\n    return [\r\n      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'in-progress'],\r\n      ['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n      ['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n      ['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n      ['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n      ['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n      ['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n      ['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n      ['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n      ['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n    ].map(companyDetails => ({\r\n      id: companyDetails[0],\r\n      name: companyDetails[1],\r\n      description: companyDetails[2],\r\n      status: companyDetails[3],\r\n    }));\r\n  }\r\n\r\n  updateCardStatus(cardId, newStatus) {\r\n    const clients = { ...this.state.clients };\r\n\r\n    // Ensure the target status exists\r\n    if (!clients[newStatus]) {\r\n      console.error(`Invalid status: ${newStatus}`);\r\n      return;\r\n    }\r\n\r\n    // Find and remove the card from its old status\r\n    let cardToMove = null;\r\n    Object.keys(clients).forEach(status => {\r\n      const cardIndex = clients[status].findIndex(client => client.id === cardId);\r\n      if (cardIndex !== -1) {\r\n        // Remove card from the old swimlane\r\n        [cardToMove] = clients[status].splice(cardIndex, 1);\r\n        cardToMove.status = newStatus; // Update card's status\r\n      }\r\n    });\r\n\r\n    // Add the card to the new swimlane\r\n    if (cardToMove) {\r\n      clients[newStatus].push(cardToMove);\r\n      this.setState({ clients });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current])\r\n      .on('drop', (el, target) => {\r\n        const newStatus = target.getAttribute('data-status');\r\n        const cardId = el.getAttribute('data-id');\r\n        this.updateCardStatus(cardId, newStatus); // Update the card's status\r\n      });\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\nconstructor(props) {\r\nsuper(props);\r\nconst clients = this.getClients();\r\nthis.state = {\r\nclients: {\r\nbacklog: clients.filter(client => client.status === 'backlog'),\r\ninProgress: clients.filter(client => client.status === 'in-progress'),\r\ncomplete: clients.filter(client => client.status === 'complete'),\r\n}\r\n};\r\nthis.swimlanes = {\r\nbacklog: React.createRef(),\r\ninProgress: React.createRef(),\r\ncomplete: React.createRef(),\r\n};\r\nthis.drake = null; // Initialize dragula instance\r\n}\r\n\r\ngetClients() {\r\nreturn [\r\n['1','Stark, White and Abbott','Cloned Optimal Architecture', 'backlog'],\r\n['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n].map(companyDetails => ({\r\nid: companyDetails?.[0],\r\nname: companyDetails?.[1],\r\ndescription: companyDetails?.[2],\r\nstatus: companyDetails?.[3],\r\n})).filter(client => client.id); // Ensure no undefined clients\r\n}\r\n\r\nupdateCardStatus(cardId, newStatus) {\r\nthis.setState(prevState => {\r\nconst updatedClients = { ...prevState.clients };\r\nlet cardToMove = null;\r\nlet previousStatus = null;\r\n\r\n// Find and remove the card from its old status\r\n  Object.keys(updatedClients).forEach(status => {\r\n    const cardIndex = updatedClients?.[status]?.findIndex(client => client.id === cardId);\r\n    if (cardIndex !== -1) {\r\n      // Create a copy of the card before removing\r\n      cardToMove = { ...updatedClients?.[status]?.[cardIndex] };\r\n      updatedClients?.[status]?.splice(cardIndex, 1);\r\n      previousStatus = status;\r\n    }\r\n  });\r\n\r\n  // Update the card's status if found\r\n  if (cardToMove) {\r\n    cardToMove.status = newStatus;\r\n    if (!updatedClients?.[newStatus]) {\r\n      updatedClients?.[newStatus] = [];\r\n    }\r\n    updatedClients?.[newStatus]?.push(cardToMove);\r\n  }\r\n\r\n  return { clients: updatedClients };\r\n});\r\n}\r\n\r\ncomponentDidMount() {\r\nthis.drake = dragula([\r\nthis.swimlanes.backlog.current,\r\nthis.swimlanes.inProgress.current,\r\nthis.swimlanes.complete.current\r\n]);\r\n\r\nthis.drake.on('drop', (el, target) => {\r\n  const newStatus = target.getAttribute('data-status');\r\n  const cardId = el.getAttribute('data-id');\r\n  this.updateCardStatus(cardId, newStatus);\r\n});\r\n}\r\n\r\ncomponentWillUnmount() {\r\nif (this.drake) {\r\nthis.drake.destroy();\r\n}\r\n}\r\n\r\nrenderSwimlane(name, status, clients, ref) {\r\nreturn (\r\n<Swimlane\r\nname={name}\r\nstatus={status}\r\nclients={clients}\r\ndragulaRef={ref}\r\n/>\r\n);\r\n}\r\n\r\nrender() {\r\nreturn (\r\n<div className=\"Board\">\r\n<div className=\"container-fluid\">\r\n<div className=\"row\">\r\n<div className=\"col-md-4\">\r\n{this.renderSwimlane('Backlog', 'backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n</div>\r\n<div className=\"col-md-4\">\r\n{this.renderSwimlane('In Progress', 'in-progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n</div>\r\n<div className=\"col-md-4\">\r\n{this.renderSwimlane('Complete', 'complete', this.state.clients.complete, this.swimlanes.complete)}\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n);\r\n}\r\n} */import React from'react';import'dragula/dist/dragula.css';import Swimlane from'./Swimlane';import'./Board.css';import dragula from'dragula';export default class Board extends React.Component{constructor(props){super(props);const clients=this.getClients();this.state={clients:{backlog:clients.filter(client=>client.status==='backlog'),inProgress:clients.filter(client=>client.status==='in-progress'),complete:clients.filter(client=>client.status==='complete')}};// Refs for each swimlane\nthis.swimlanes={backlog:/*#__PURE__*/React.createRef(),inProgress:/*#__PURE__*/React.createRef(),complete:/*#__PURE__*/React.createRef()};this.drake=null;// Initialize dragula instance\n}// Generate a list of clients\ngetClients(){return[['1','Stark, White and Abbott','Cloned Optimal Architecture','backlog'],['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation','complete'],['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface','backlog'],['4','Thompson PLC','Streamlined Regional Knowledgeuser','in-progress'],['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix','in-progress'],['6','Boehm and Sons','Automated Systematic Paradigm','backlog'],['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy','backlog'],['8','Schumm-Labadie','Operative Heuristic Challenge','backlog'],['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude','backlog'],['10','Romaguera Inc','Managed Foreground Toolset','backlog'],['11','Reilly-King','Future-Proofed Interactive Toolset','complete'],['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability','backlog'],['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website','complete'],['14','Borer LLC','Profit-Focused Incremental Orchestration','backlog'],['15','Emmerich-Ankunding','User-Centric Stable Extranet','in-progress'],['16','Willms-Abbott','Progressive Bandwidth-Monitored Access','in-progress'],['17','Brekke PLC','Intuitive User-Facing Customerloyalty','complete'],['18','Bins, Toy and Klocko','Integrated Assymetric Software','backlog'],['19','Hodkiewicz-Hayes','Programmable Systematic Securedline','backlog'],['20','Murphy, Lang and Ferry','Organized Explicit Access','backlog']].map(_ref=>{let[id,name,description,status]=_ref;return{id,name,description,status};});}// Update the status of a card when it is dropped into a new swimlane\nupdateCardStatus(cardId,newStatus){this.setState(prevState=>{const updatedClients={...prevState.clients};let cardToMove=null;// Find and remove the card from its old status\nObject.keys(updatedClients).forEach(status=>{const cardIndex=updatedClients[status].findIndex(client=>client.id===cardId);if(cardIndex!==-1){// Create a copy of the card before removing\ncardToMove={...updatedClients[status][cardIndex]};updatedClients[status].splice(cardIndex,1);}});// If the card is found, update its status and add it to the new swimlane\nif(cardToMove){cardToMove.status=newStatus;if(!updatedClients[newStatus]){updatedClients[newStatus]=[];}updatedClients[newStatus].push(cardToMove);}return{clients:updatedClients};});}// Initialize drag-and-drop behavior\ncomponentDidMount(){this.drake=dragula([this.swimlanes.backlog.current,this.swimlanes.inProgress.current,this.swimlanes.complete.current]);// Handle the drop event\nthis.drake.on('drop',(el,target)=>{const newStatus=target.getAttribute('data-status');const cardId=el.getAttribute('data-id');this.updateCardStatus(cardId,newStatus);});}// Clean up dragula when the component is unmounted\ncomponentWillUnmount(){if(this.drake){this.drake.destroy();}}// Render the swimlane component for each status\nrenderSwimlane(name,status,clients,ref){return/*#__PURE__*/React.createElement(Swimlane,{name:name,status:status,clients:clients,dragulaRef:ref});}// Main render method\nrender(){return/*#__PURE__*/React.createElement(\"div\",{className:\"Board\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container-fluid\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4\"},this.renderSwimlane('Backlog','backlog',this.state.clients.backlog,this.swimlanes.backlog)),/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4\"},this.renderSwimlane('In Progress','in-progress',this.state.clients.inProgress,this.swimlanes.inProgress)),/*#__PURE__*/React.createElement(\"div\",{className:\"col-md-4\"},this.renderSwimlane('Complete','complete',this.state.clients.complete,this.swimlanes.complete)))));}}","map":{"version":3,"names":["React","Swimlane","dragula","Board","Component","constructor","props","clients","getClients","state","backlog","filter","client","status","inProgress","complete","swimlanes","createRef","drake","map","_ref","id","name","description","updateCardStatus","cardId","newStatus","setState","prevState","updatedClients","cardToMove","Object","keys","forEach","cardIndex","findIndex","splice","push","componentDidMount","current","on","el","target","getAttribute","componentWillUnmount","destroy","renderSwimlane","ref","createElement","dragulaRef","render","className"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Board.js"],"sourcesContent":["/* import React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      }\r\n    };\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n  }\r\n\r\n  getClients() {\r\n    return [\r\n      ['1','Stark, White and Abbott','Cloned Optimal Architecture', 'in-progress'],\r\n      ['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n      ['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n      ['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n      ['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n      ['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n      ['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n      ['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n      ['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n      ['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n    ].map(companyDetails => ({\r\n      id: companyDetails[0],\r\n      name: companyDetails[1],\r\n      description: companyDetails[2],\r\n      status: companyDetails[3],\r\n    }));\r\n  }\r\n\r\n  updateCardStatus(cardId, newStatus) {\r\n    const clients = { ...this.state.clients };\r\n\r\n    // Ensure the target status exists\r\n    if (!clients[newStatus]) {\r\n      console.error(`Invalid status: ${newStatus}`);\r\n      return;\r\n    }\r\n\r\n    // Find and remove the card from its old status\r\n    let cardToMove = null;\r\n    Object.keys(clients).forEach(status => {\r\n      const cardIndex = clients[status].findIndex(client => client.id === cardId);\r\n      if (cardIndex !== -1) {\r\n        // Remove card from the old swimlane\r\n        [cardToMove] = clients[status].splice(cardIndex, 1);\r\n        cardToMove.status = newStatus; // Update card's status\r\n      }\r\n    });\r\n\r\n    // Add the card to the new swimlane\r\n    if (cardToMove) {\r\n      clients[newStatus].push(cardToMove);\r\n      this.setState({ clients });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    dragula([this.swimlanes.backlog.current, this.swimlanes.inProgress.current, this.swimlanes.complete.current])\r\n      .on('drop', (el, target) => {\r\n        const newStatus = target.getAttribute('data-status');\r\n        const cardId = el.getAttribute('data-id');\r\n        this.updateCardStatus(cardId, newStatus); // Update the card's status\r\n      });\r\n  }\r\n\r\n  renderSwimlane(name, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\nconstructor(props) {\r\nsuper(props);\r\nconst clients = this.getClients();\r\nthis.state = {\r\nclients: {\r\nbacklog: clients.filter(client => client.status === 'backlog'),\r\ninProgress: clients.filter(client => client.status === 'in-progress'),\r\ncomplete: clients.filter(client => client.status === 'complete'),\r\n}\r\n};\r\nthis.swimlanes = {\r\nbacklog: React.createRef(),\r\ninProgress: React.createRef(),\r\ncomplete: React.createRef(),\r\n};\r\nthis.drake = null; // Initialize dragula instance\r\n}\r\n\r\ngetClients() {\r\nreturn [\r\n['1','Stark, White and Abbott','Cloned Optimal Architecture', 'backlog'],\r\n['2','Wiza LLC','Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n['3','Nolan LLC','Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n['4','Thompson PLC','Streamlined Regional Knowledgeuser', 'in-progress'],\r\n['5','Walker-Williamson','Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n['6','Boehm and Sons','Automated Systematic Paradigm', 'backlog'],\r\n['7','Runolfsson, Hegmann and Block','Integrated Transitional Strategy', 'backlog'],\r\n['8','Schumm-Labadie','Operative Heuristic Challenge', 'backlog'],\r\n['9','Kohler Group','Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n['10','Romaguera Inc','Managed Foreground Toolset', 'backlog'],\r\n['11','Reilly-King','Future-Proofed Interactive Toolset', 'complete'],\r\n['12','Emard, Champlin and Runolfsdottir','Devolved Needs-Based Capability', 'backlog'],\r\n['13','Fritsch, Cronin and Wolff','Open-Source 3Rdgeneration Website', 'complete'],\r\n['14','Borer LLC','Profit-Focused Incremental Orchestration', 'backlog'],\r\n['15','Emmerich-Ankunding','User-Centric Stable Extranet', 'in-progress'],\r\n['16','Willms-Abbott','Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n['17','Brekke PLC','Intuitive User-Facing Customerloyalty', 'complete'],\r\n['18','Bins, Toy and Klocko','Integrated Assymetric Software', 'backlog'],\r\n['19','Hodkiewicz-Hayes','Programmable Systematic Securedline', 'backlog'],\r\n['20','Murphy, Lang and Ferry','Organized Explicit Access', 'backlog'],\r\n].map(companyDetails => ({\r\nid: companyDetails?.[0],\r\nname: companyDetails?.[1],\r\ndescription: companyDetails?.[2],\r\nstatus: companyDetails?.[3],\r\n})).filter(client => client.id); // Ensure no undefined clients\r\n}\r\n\r\nupdateCardStatus(cardId, newStatus) {\r\nthis.setState(prevState => {\r\nconst updatedClients = { ...prevState.clients };\r\nlet cardToMove = null;\r\nlet previousStatus = null;\r\n\r\n// Find and remove the card from its old status\r\n  Object.keys(updatedClients).forEach(status => {\r\n    const cardIndex = updatedClients?.[status]?.findIndex(client => client.id === cardId);\r\n    if (cardIndex !== -1) {\r\n      // Create a copy of the card before removing\r\n      cardToMove = { ...updatedClients?.[status]?.[cardIndex] };\r\n      updatedClients?.[status]?.splice(cardIndex, 1);\r\n      previousStatus = status;\r\n    }\r\n  });\r\n\r\n  // Update the card's status if found\r\n  if (cardToMove) {\r\n    cardToMove.status = newStatus;\r\n    if (!updatedClients?.[newStatus]) {\r\n      updatedClients?.[newStatus] = [];\r\n    }\r\n    updatedClients?.[newStatus]?.push(cardToMove);\r\n  }\r\n\r\n  return { clients: updatedClients };\r\n});\r\n}\r\n\r\ncomponentDidMount() {\r\nthis.drake = dragula([\r\nthis.swimlanes.backlog.current,\r\nthis.swimlanes.inProgress.current,\r\nthis.swimlanes.complete.current\r\n]);\r\n\r\nthis.drake.on('drop', (el, target) => {\r\n  const newStatus = target.getAttribute('data-status');\r\n  const cardId = el.getAttribute('data-id');\r\n  this.updateCardStatus(cardId, newStatus);\r\n});\r\n}\r\n\r\ncomponentWillUnmount() {\r\nif (this.drake) {\r\nthis.drake.destroy();\r\n}\r\n}\r\n\r\nrenderSwimlane(name, status, clients, ref) {\r\nreturn (\r\n<Swimlane\r\nname={name}\r\nstatus={status}\r\nclients={clients}\r\ndragulaRef={ref}\r\n/>\r\n);\r\n}\r\n\r\nrender() {\r\nreturn (\r\n<div className=\"Board\">\r\n<div className=\"container-fluid\">\r\n<div className=\"row\">\r\n<div className=\"col-md-4\">\r\n{this.renderSwimlane('Backlog', 'backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n</div>\r\n<div className=\"col-md-4\">\r\n{this.renderSwimlane('In Progress', 'in-progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n</div>\r\n<div className=\"col-md-4\">\r\n{this.renderSwimlane('Complete', 'complete', this.state.clients.complete, this.swimlanes.complete)}\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n);\r\n}\r\n} */\r\n\r\nimport React from 'react';\r\nimport 'dragula/dist/dragula.css';\r\nimport Swimlane from './Swimlane';\r\nimport './Board.css';\r\nimport dragula from 'dragula';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const clients = this.getClients();\r\n\r\n    this.state = {\r\n      clients: {\r\n        backlog: clients.filter(client => client.status === 'backlog'),\r\n        inProgress: clients.filter(client => client.status === 'in-progress'),\r\n        complete: clients.filter(client => client.status === 'complete'),\r\n      },\r\n    };\r\n\r\n    // Refs for each swimlane\r\n    this.swimlanes = {\r\n      backlog: React.createRef(),\r\n      inProgress: React.createRef(),\r\n      complete: React.createRef(),\r\n    };\r\n\r\n    this.drake = null; // Initialize dragula instance\r\n  }\r\n\r\n  // Generate a list of clients\r\n  getClients() {\r\n    return [\r\n      ['1', 'Stark, White and Abbott', 'Cloned Optimal Architecture', 'backlog'],\r\n      ['2', 'Wiza LLC', 'Exclusive Bandwidth-Monitored Implementation', 'complete'],\r\n      ['3', 'Nolan LLC', 'Vision-Oriented 4Thgeneration Graphicaluserinterface', 'backlog'],\r\n      ['4', 'Thompson PLC', 'Streamlined Regional Knowledgeuser', 'in-progress'],\r\n      ['5', 'Walker-Williamson', 'Team-Oriented 6Thgeneration Matrix', 'in-progress'],\r\n      ['6', 'Boehm and Sons', 'Automated Systematic Paradigm', 'backlog'],\r\n      ['7', 'Runolfsson, Hegmann and Block', 'Integrated Transitional Strategy', 'backlog'],\r\n      ['8', 'Schumm-Labadie', 'Operative Heuristic Challenge', 'backlog'],\r\n      ['9', 'Kohler Group', 'Re-Contextualized Multi-Tasking Attitude', 'backlog'],\r\n      ['10', 'Romaguera Inc', 'Managed Foreground Toolset', 'backlog'],\r\n      ['11', 'Reilly-King', 'Future-Proofed Interactive Toolset', 'complete'],\r\n      ['12', 'Emard, Champlin and Runolfsdottir', 'Devolved Needs-Based Capability', 'backlog'],\r\n      ['13', 'Fritsch, Cronin and Wolff', 'Open-Source 3Rdgeneration Website', 'complete'],\r\n      ['14', 'Borer LLC', 'Profit-Focused Incremental Orchestration', 'backlog'],\r\n      ['15', 'Emmerich-Ankunding', 'User-Centric Stable Extranet', 'in-progress'],\r\n      ['16', 'Willms-Abbott', 'Progressive Bandwidth-Monitored Access', 'in-progress'],\r\n      ['17', 'Brekke PLC', 'Intuitive User-Facing Customerloyalty', 'complete'],\r\n      ['18', 'Bins, Toy and Klocko', 'Integrated Assymetric Software', 'backlog'],\r\n      ['19', 'Hodkiewicz-Hayes', 'Programmable Systematic Securedline', 'backlog'],\r\n      ['20', 'Murphy, Lang and Ferry', 'Organized Explicit Access', 'backlog'],\r\n    ].map(([id, name, description, status]) => ({\r\n      id,\r\n      name,\r\n      description,\r\n      status,\r\n    }));\r\n  }\r\n\r\n  // Update the status of a card when it is dropped into a new swimlane\r\n  updateCardStatus(cardId, newStatus) {\r\n    this.setState(prevState => {\r\n      const updatedClients = { ...prevState.clients };\r\n      let cardToMove = null;\r\n\r\n      // Find and remove the card from its old status\r\n      Object.keys(updatedClients).forEach(status => {\r\n        const cardIndex = updatedClients[status].findIndex(client => client.id === cardId);\r\n        if (cardIndex !== -1) {\r\n          // Create a copy of the card before removing\r\n          cardToMove = { ...updatedClients[status][cardIndex] };\r\n          updatedClients[status].splice(cardIndex, 1);\r\n        }\r\n      });\r\n\r\n      // If the card is found, update its status and add it to the new swimlane\r\n      if (cardToMove) {\r\n        cardToMove.status = newStatus;\r\n        if (!updatedClients[newStatus]) {\r\n          updatedClients[newStatus] = [];\r\n        }\r\n        updatedClients[newStatus].push(cardToMove);\r\n      }\r\n\r\n      return { clients: updatedClients };\r\n    });\r\n  }\r\n\r\n  // Initialize drag-and-drop behavior\r\n  componentDidMount() {\r\n    this.drake = dragula([\r\n      this.swimlanes.backlog.current,\r\n      this.swimlanes.inProgress.current,\r\n      this.swimlanes.complete.current,\r\n    ]);\r\n\r\n    // Handle the drop event\r\n    this.drake.on('drop', (el, target) => {\r\n      const newStatus = target.getAttribute('data-status');\r\n      const cardId = el.getAttribute('data-id');\r\n      this.updateCardStatus(cardId, newStatus);\r\n    });\r\n  }\r\n\r\n  // Clean up dragula when the component is unmounted\r\n  componentWillUnmount() {\r\n    if (this.drake) {\r\n      this.drake.destroy();\r\n    }\r\n  }\r\n\r\n  // Render the swimlane component for each status\r\n  renderSwimlane(name, status, clients, ref) {\r\n    return (\r\n      <Swimlane\r\n        name={name}\r\n        status={status}\r\n        clients={clients}\r\n        dragulaRef={ref}\r\n      />\r\n    );\r\n  }\r\n\r\n  // Main render method\r\n  render() {\r\n    return (\r\n      <div className=\"Board\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Backlog', 'backlog', this.state.clients.backlog, this.swimlanes.backlog)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('In Progress', 'in-progress', this.state.clients.inProgress, this.swimlanes.inProgress)}\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n              {this.renderSwimlane('Complete', 'complete', this.state.clients.complete, this.swimlanes.complete)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}