{"ast":null,"code":"import React from'react';import Card from'./Card';import'./Swimlane.css';import Dragula from'dragula';export default class Swimlane extends React.Component{constructor(props){super(props);this.state={clients:this.props.clients};}// Update card status when dropped in a new swimlane\nupdateCardStatus(cardId,newStatus){const updatedClients=this.state.clients.map(client=>{if(client.id===cardId){client.status=newStatus;// Update the card's status based on the new swimlane\n}return client;});this.setState({clients:updatedClients});}// Initialize drag-and-drop functionality with Dragula\ncomponentDidMount(){const container=this.props.dragulaRef.current;if(container){const drake=Dragula([container]);// Handle when a card is dropped in another swimlane\ndrake.on('drop',(el,target)=>{const cardId=el.dataset.id;const newSwimlane=target.dataset.swimlane;// Target swimlane is in the data attribute\nthis.updateCardStatus(cardId,newSwimlane);});}}}","map":{"version":3,"names":["React","Card","Dragula","Swimlane","Component","constructor","props","state","clients","updateCardStatus","cardId","newStatus","updatedClients","map","client","id","status","setState","componentDidMount","container","dragulaRef","current","drake","on","el","target","dataset","newSwimlane","swimlane"],"sources":["C:/Users/91848/Desktop/cloudsecdoc/interviewPrep/Simulations/YCombinator/Shiptivity/src/Swimlane.js"],"sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\nimport './Swimlane.css';\r\nimport Dragula from 'dragula';\r\n\r\nexport default class Swimlane extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      clients: this.props.clients,\r\n    };\r\n  }\r\n\r\n  // Update card status when dropped in a new swimlane\r\n  updateCardStatus(cardId, newStatus) {\r\n    const updatedClients = this.state.clients.map(client => {\r\n      if (client.id === cardId) {\r\n        client.status = newStatus;  // Update the card's status based on the new swimlane\r\n      }\r\n      return client;\r\n    });\r\n\r\n    this.setState({ clients: updatedClients });\r\n  }\r\n\r\n  // Initialize drag-and-drop functionality with Dragula\r\n  componentDidMount() {\r\n    const container = this.props.dragulaRef.current;\r\n    \r\n    if (container) {\r\n      const drake = Dragula([container]);\r\n\r\n      // Handle when a card is dropped in another swimlane\r\n      drake.on('drop', (el, target) => {\r\n        const cardId = el.dataset.id;\r\n        const newSwimlane = target.dataset.swimlane;  // Target swimlane is in the data attribute\r\n        this.updateCardStatus(cardId, newSwimlane);\r\n      });\r\n    }\r\n  }\r\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,IAAI,KAAM,QAAQ,CACzB,MAAO,gBAAgB,CACvB,MAAO,CAAAC,OAAO,KAAM,SAAS,CAE7B,cAAe,MAAM,CAAAC,QAAQ,QAAS,CAAAH,KAAK,CAACI,SAAU,CACpDC,WAAWA,CAACC,KAAK,CAAE,CACjB,KAAK,CAACA,KAAK,CAAC,CACZ,IAAI,CAACC,KAAK,CAAG,CACXC,OAAO,CAAE,IAAI,CAACF,KAAK,CAACE,OACtB,CAAC,CACH,CAEA;AACAC,gBAAgBA,CAACC,MAAM,CAAEC,SAAS,CAAE,CAClC,KAAM,CAAAC,cAAc,CAAG,IAAI,CAACL,KAAK,CAACC,OAAO,CAACK,GAAG,CAACC,MAAM,EAAI,CACtD,GAAIA,MAAM,CAACC,EAAE,GAAKL,MAAM,CAAE,CACxBI,MAAM,CAACE,MAAM,CAAGL,SAAS,CAAG;AAC9B,CACA,MAAO,CAAAG,MAAM,CACf,CAAC,CAAC,CAEF,IAAI,CAACG,QAAQ,CAAC,CAAET,OAAO,CAAEI,cAAe,CAAC,CAAC,CAC5C,CAEA;AACAM,iBAAiBA,CAAA,CAAG,CAClB,KAAM,CAAAC,SAAS,CAAG,IAAI,CAACb,KAAK,CAACc,UAAU,CAACC,OAAO,CAE/C,GAAIF,SAAS,CAAE,CACb,KAAM,CAAAG,KAAK,CAAGpB,OAAO,CAAC,CAACiB,SAAS,CAAC,CAAC,CAElC;AACAG,KAAK,CAACC,EAAE,CAAC,MAAM,CAAE,CAACC,EAAE,CAAEC,MAAM,GAAK,CAC/B,KAAM,CAAAf,MAAM,CAAGc,EAAE,CAACE,OAAO,CAACX,EAAE,CAC5B,KAAM,CAAAY,WAAW,CAAGF,MAAM,CAACC,OAAO,CAACE,QAAQ,CAAG;AAC9C,IAAI,CAACnB,gBAAgB,CAACC,MAAM,CAAEiB,WAAW,CAAC,CAC5C,CAAC,CAAC,CACJ,CACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}